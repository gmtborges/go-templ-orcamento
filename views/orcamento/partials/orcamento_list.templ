package partials

import (
	"fmt"
	"time"

	"github.com/gmtborges/orcamento-auto/types"
)

func getAutoCategoriaNomeFromOrcamentoItens(orcamentoItens []types.OrcamentoItemModel) string {
	var autoCategoriaDescricoes string
	if len(orcamentoItens) < 3 {
		for i, item := range orcamentoItens {
			if i > 0 {
				autoCategoriaDescricoes += ", "
			}
			autoCategoriaDescricoes += item.AutoCategoriaDescricao
		}
	} else {
		autoCategoriaDescricoes = fmt.Sprintf("%s, %s, %s ...",
			orcamentoItens[0].AutoCategoriaDescricao,
			orcamentoItens[1].AutoCategoriaDescricao,
			orcamentoItens[2].AutoCategoriaDescricao,
		)
	}
	return autoCategoriaDescricoes
}

templ orcamentoStatus(status types.OrcamentoStatus) {
	switch status {
		case types.OrcamentoStatusAguardandoProposta:
			<td class="font-bold text-info">Aguardando proposta</td>
		case types.OrcamentoStatusPendente:
			<td class="font-bold text-warning">Pendente</td>
		case types.OrcamentoStatusFinalizado:
			<td class="font-bold text-success">Finalizado</td>
		case types.OrcamentoStatusCancelado:
			<td class="font-bold text-error">Cancelado</td>
	}
}

func formatRelativeTime(t time.Time) string {
	now := time.Now()
	diff := now.Sub(t)
	if diff.Seconds() < 60 {
		return fmt.Sprintf("agora a pouco")
	}
	if diff.Minutes() < 60 {
		if int(diff.Minutes()) == 1 {
			return fmt.Sprintf("1 minuto atrás")
		}
		return fmt.Sprintf("%d minutos atrás", int(diff.Minutes()))
	}
	if diff.Hours() < 24 {
		if int(diff.Hours()) == 1 {
			return fmt.Sprintf("1 hora atrás")
		}
		return fmt.Sprintf("%d horas atrás", int(diff.Hours()))
	}
	if diff.Hours() < 48 {
		return fmt.Sprintf("ontem")
	}
	if diff.Hours() < 168 {
		if int(diff.Hours()/24) == 1 {
			return fmt.Sprintf("1 dia atrás")
		}
		return fmt.Sprintf("%d dias atrás", int(diff.Hours()/24))
	}
	if diff.Hours() < 720 {
		if int(diff.Hours()/168) == 1 {
			return fmt.Sprintf("1 semana atrás")
		}
		return fmt.Sprintf("%d semanas atrás", int(diff.Hours()/168))
	}
	if diff.Hours() < 8760 {
		if int(diff.Hours()/720) == 1 {
			return fmt.Sprintf("1 mês atrás")
		}
		return fmt.Sprintf("%d meses atrás", int(diff.Hours()/720))
	}
	return t.Format("02/01/2006")
}

templ OrcamentoList(vm types.OrcamentoIndexViewModel) {
	<div id="orcamento-table" class="flex flex-col w-full overflow-x-auto md:overflow-hidden">
		<div class="min-w-[1200px] w-full">
			<table class="mt-5 table table-zebra">
				<thead class="text-base uppercase bg-base-300">
					<tr>
						<th>#</th>
						<th>Associado</th>
						<th>Veículo</th>
						<th>Serviços/Peças</th>
						<th>Data de criação</th>
						<th>Status</th>
						<th>Ações</th>
					</tr>
				</thead>
				<tbody class="text-base">
					for i, orcamento := range vm.Orcamentos {
						<tr class="leading-10">
							<td>{ fmt.Sprintf("%d", vm.SeqNumber + i) }</td>
							<td>{ orcamento.AssociadoNome }</td>
							<td>{ orcamento.VeiculoNome } / { fmt.Sprintf("%d", orcamento.VeiculoAno) }</td>
							<td>{ getAutoCategoriaNomeFromOrcamentoItens(orcamento.Itens) }</td>
							<td>{ formatRelativeTime(orcamento.DataCriacao) }</td>
							@orcamentoStatus(orcamento.Status)
							<td class="flex gap-5">
								<a
									href={ templ.URL(fmt.Sprintf("/orcamentos/visualizar/%d", orcamento.ID)) }
									class="tooltip"
									data-tip="Visualizar"
								>
									<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
										<path stroke-linecap="round" stroke-linejoin="round" d="M2.036 12.322a1.012 1.012 0 0 1 0-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178Z"></path>
										<path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path>
									</svg>
								</a>
								<a
									href={ templ.URL(fmt.Sprintf("/orcamentos/editar/%d", orcamento.ID)) }
									class="tooltip"
									data-tip="Editar"
								>
									<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
										<path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10"></path>
									</svg>
								</a>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
		<div class="flex justify-end items-center gap-4">
			<p class="mt-2">Total: { fmt.Sprintf("%d", vm.Count) }</p>
			<div class="join mt-2">
				for i := 1; i <= vm.TotalPages; i++ {
					<button
						class={ "join-item", "btn", templ.KV("btn-active", vm.CurrentPage == i) }
						hx-get={ string(templ.URL(fmt.Sprintf("/orcamentos?p=%d", i))) }
						hx-target="#orcamento-table"
						hx-swap="innerHTML"
						hx-push-url="true"
					>
						{ fmt.Sprintf("%d", i) }
					</button>
				}
			</div>
		</div>
	</div>
}
