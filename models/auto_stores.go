// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AutoStore is an object representing the database table.
type AutoStore struct {
	StoreID     null.Int64  `boil:"store_id" json:"store_id,omitempty" toml:"store_id" yaml:"store_id,omitempty"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Location    null.String `boil:"location" json:"location,omitempty" toml:"location" yaml:"location,omitempty"`
	ContactInfo null.String `boil:"contact_info" json:"contact_info,omitempty" toml:"contact_info" yaml:"contact_info,omitempty"`
	CategoryID  int64       `boil:"category_id" json:"category_id" toml:"category_id" yaml:"category_id"`
	CreatedAt   null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt   null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *autoStoreR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L autoStoreL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AutoStoreColumns = struct {
	StoreID     string
	Name        string
	Location    string
	ContactInfo string
	CategoryID  string
	CreatedAt   string
	UpdatedAt   string
}{
	StoreID:     "store_id",
	Name:        "name",
	Location:    "location",
	ContactInfo: "contact_info",
	CategoryID:  "category_id",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var AutoStoreTableColumns = struct {
	StoreID     string
	Name        string
	Location    string
	ContactInfo string
	CategoryID  string
	CreatedAt   string
	UpdatedAt   string
}{
	StoreID:     "auto_stores.store_id",
	Name:        "auto_stores.name",
	Location:    "auto_stores.location",
	ContactInfo: "auto_stores.contact_info",
	CategoryID:  "auto_stores.category_id",
	CreatedAt:   "auto_stores.created_at",
	UpdatedAt:   "auto_stores.updated_at",
}

// Generated where

var AutoStoreWhere = struct {
	StoreID     whereHelpernull_Int64
	Name        whereHelperstring
	Location    whereHelpernull_String
	ContactInfo whereHelpernull_String
	CategoryID  whereHelperint64
	CreatedAt   whereHelpernull_Time
	UpdatedAt   whereHelpernull_Time
}{
	StoreID:     whereHelpernull_Int64{field: "\"auto_stores\".\"store_id\""},
	Name:        whereHelperstring{field: "\"auto_stores\".\"name\""},
	Location:    whereHelpernull_String{field: "\"auto_stores\".\"location\""},
	ContactInfo: whereHelpernull_String{field: "\"auto_stores\".\"contact_info\""},
	CategoryID:  whereHelperint64{field: "\"auto_stores\".\"category_id\""},
	CreatedAt:   whereHelpernull_Time{field: "\"auto_stores\".\"created_at\""},
	UpdatedAt:   whereHelpernull_Time{field: "\"auto_stores\".\"updated_at\""},
}

// AutoStoreRels is where relationship names are stored.
var AutoStoreRels = struct {
	Category        string
	StoreAutoOffers string
}{
	Category:        "Category",
	StoreAutoOffers: "StoreAutoOffers",
}

// autoStoreR is where relationships are stored.
type autoStoreR struct {
	Category        *AutoPartsCategory `boil:"Category" json:"Category" toml:"Category" yaml:"Category"`
	StoreAutoOffers AutoOfferSlice     `boil:"StoreAutoOffers" json:"StoreAutoOffers" toml:"StoreAutoOffers" yaml:"StoreAutoOffers"`
}

// NewStruct creates a new relationship struct
func (*autoStoreR) NewStruct() *autoStoreR {
	return &autoStoreR{}
}

func (r *autoStoreR) GetCategory() *AutoPartsCategory {
	if r == nil {
		return nil
	}
	return r.Category
}

func (r *autoStoreR) GetStoreAutoOffers() AutoOfferSlice {
	if r == nil {
		return nil
	}
	return r.StoreAutoOffers
}

// autoStoreL is where Load methods for each relationship are stored.
type autoStoreL struct{}

var (
	autoStoreAllColumns            = []string{"store_id", "name", "location", "contact_info", "category_id", "created_at", "updated_at"}
	autoStoreColumnsWithoutDefault = []string{"name", "category_id"}
	autoStoreColumnsWithDefault    = []string{"store_id", "location", "contact_info", "created_at", "updated_at"}
	autoStorePrimaryKeyColumns     = []string{"store_id"}
	autoStoreGeneratedColumns      = []string{"store_id"}
)

type (
	// AutoStoreSlice is an alias for a slice of pointers to AutoStore.
	// This should almost always be used instead of []AutoStore.
	AutoStoreSlice []*AutoStore
	// AutoStoreHook is the signature for custom AutoStore hook methods
	AutoStoreHook func(context.Context, boil.ContextExecutor, *AutoStore) error

	autoStoreQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	autoStoreType                 = reflect.TypeOf(&AutoStore{})
	autoStoreMapping              = queries.MakeStructMapping(autoStoreType)
	autoStorePrimaryKeyMapping, _ = queries.BindMapping(autoStoreType, autoStoreMapping, autoStorePrimaryKeyColumns)
	autoStoreInsertCacheMut       sync.RWMutex
	autoStoreInsertCache          = make(map[string]insertCache)
	autoStoreUpdateCacheMut       sync.RWMutex
	autoStoreUpdateCache          = make(map[string]updateCache)
	autoStoreUpsertCacheMut       sync.RWMutex
	autoStoreUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var autoStoreAfterSelectMu sync.Mutex
var autoStoreAfterSelectHooks []AutoStoreHook

var autoStoreBeforeInsertMu sync.Mutex
var autoStoreBeforeInsertHooks []AutoStoreHook
var autoStoreAfterInsertMu sync.Mutex
var autoStoreAfterInsertHooks []AutoStoreHook

var autoStoreBeforeUpdateMu sync.Mutex
var autoStoreBeforeUpdateHooks []AutoStoreHook
var autoStoreAfterUpdateMu sync.Mutex
var autoStoreAfterUpdateHooks []AutoStoreHook

var autoStoreBeforeDeleteMu sync.Mutex
var autoStoreBeforeDeleteHooks []AutoStoreHook
var autoStoreAfterDeleteMu sync.Mutex
var autoStoreAfterDeleteHooks []AutoStoreHook

var autoStoreBeforeUpsertMu sync.Mutex
var autoStoreBeforeUpsertHooks []AutoStoreHook
var autoStoreAfterUpsertMu sync.Mutex
var autoStoreAfterUpsertHooks []AutoStoreHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AutoStore) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoStoreAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AutoStore) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoStoreBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AutoStore) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoStoreAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AutoStore) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoStoreBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AutoStore) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoStoreAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AutoStore) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoStoreBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AutoStore) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoStoreAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AutoStore) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoStoreBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AutoStore) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoStoreAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAutoStoreHook registers your hook function for all future operations.
func AddAutoStoreHook(hookPoint boil.HookPoint, autoStoreHook AutoStoreHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		autoStoreAfterSelectMu.Lock()
		autoStoreAfterSelectHooks = append(autoStoreAfterSelectHooks, autoStoreHook)
		autoStoreAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		autoStoreBeforeInsertMu.Lock()
		autoStoreBeforeInsertHooks = append(autoStoreBeforeInsertHooks, autoStoreHook)
		autoStoreBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		autoStoreAfterInsertMu.Lock()
		autoStoreAfterInsertHooks = append(autoStoreAfterInsertHooks, autoStoreHook)
		autoStoreAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		autoStoreBeforeUpdateMu.Lock()
		autoStoreBeforeUpdateHooks = append(autoStoreBeforeUpdateHooks, autoStoreHook)
		autoStoreBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		autoStoreAfterUpdateMu.Lock()
		autoStoreAfterUpdateHooks = append(autoStoreAfterUpdateHooks, autoStoreHook)
		autoStoreAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		autoStoreBeforeDeleteMu.Lock()
		autoStoreBeforeDeleteHooks = append(autoStoreBeforeDeleteHooks, autoStoreHook)
		autoStoreBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		autoStoreAfterDeleteMu.Lock()
		autoStoreAfterDeleteHooks = append(autoStoreAfterDeleteHooks, autoStoreHook)
		autoStoreAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		autoStoreBeforeUpsertMu.Lock()
		autoStoreBeforeUpsertHooks = append(autoStoreBeforeUpsertHooks, autoStoreHook)
		autoStoreBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		autoStoreAfterUpsertMu.Lock()
		autoStoreAfterUpsertHooks = append(autoStoreAfterUpsertHooks, autoStoreHook)
		autoStoreAfterUpsertMu.Unlock()
	}
}

// One returns a single autoStore record from the query.
func (q autoStoreQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AutoStore, error) {
	o := &AutoStore{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for auto_stores")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AutoStore records from the query.
func (q autoStoreQuery) All(ctx context.Context, exec boil.ContextExecutor) (AutoStoreSlice, error) {
	var o []*AutoStore

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AutoStore slice")
	}

	if len(autoStoreAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AutoStore records in the query.
func (q autoStoreQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count auto_stores rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q autoStoreQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if auto_stores exists")
	}

	return count > 0, nil
}

// Category pointed to by the foreign key.
func (o *AutoStore) Category(mods ...qm.QueryMod) autoPartsCategoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"category_id\" = ?", o.CategoryID),
	}

	queryMods = append(queryMods, mods...)

	return AutoPartsCategories(queryMods...)
}

// StoreAutoOffers retrieves all the auto_offer's AutoOffers with an executor via store_id column.
func (o *AutoStore) StoreAutoOffers(mods ...qm.QueryMod) autoOfferQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"auto_offers\".\"store_id\"=?", o.StoreID),
	)

	return AutoOffers(queryMods...)
}

// LoadCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (autoStoreL) LoadCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAutoStore interface{}, mods queries.Applicator) error {
	var slice []*AutoStore
	var object *AutoStore

	if singular {
		var ok bool
		object, ok = maybeAutoStore.(*AutoStore)
		if !ok {
			object = new(AutoStore)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAutoStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAutoStore))
			}
		}
	} else {
		s, ok := maybeAutoStore.(*[]*AutoStore)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAutoStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAutoStore))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &autoStoreR{}
		}
		if !queries.IsNil(object.CategoryID) {
			args[object.CategoryID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &autoStoreR{}
			}

			if !queries.IsNil(obj.CategoryID) {
				args[obj.CategoryID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`auto_parts_categories`),
		qm.WhereIn(`auto_parts_categories.category_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AutoPartsCategory")
	}

	var resultSlice []*AutoPartsCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AutoPartsCategory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for auto_parts_categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auto_parts_categories")
	}

	if len(autoPartsCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Category = foreign
		if foreign.R == nil {
			foreign.R = &autoPartsCategoryR{}
		}
		foreign.R.CategoryAutoStores = append(foreign.R.CategoryAutoStores, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CategoryID, foreign.CategoryID) {
				local.R.Category = foreign
				if foreign.R == nil {
					foreign.R = &autoPartsCategoryR{}
				}
				foreign.R.CategoryAutoStores = append(foreign.R.CategoryAutoStores, local)
				break
			}
		}
	}

	return nil
}

// LoadStoreAutoOffers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (autoStoreL) LoadStoreAutoOffers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAutoStore interface{}, mods queries.Applicator) error {
	var slice []*AutoStore
	var object *AutoStore

	if singular {
		var ok bool
		object, ok = maybeAutoStore.(*AutoStore)
		if !ok {
			object = new(AutoStore)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAutoStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAutoStore))
			}
		}
	} else {
		s, ok := maybeAutoStore.(*[]*AutoStore)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAutoStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAutoStore))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &autoStoreR{}
		}
		args[object.StoreID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &autoStoreR{}
			}
			args[obj.StoreID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`auto_offers`),
		qm.WhereIn(`auto_offers.store_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load auto_offers")
	}

	var resultSlice []*AutoOffer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice auto_offers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on auto_offers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auto_offers")
	}

	if len(autoOfferAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.StoreAutoOffers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &autoOfferR{}
			}
			foreign.R.Store = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.StoreID, foreign.StoreID) {
				local.R.StoreAutoOffers = append(local.R.StoreAutoOffers, foreign)
				if foreign.R == nil {
					foreign.R = &autoOfferR{}
				}
				foreign.R.Store = local
				break
			}
		}
	}

	return nil
}

// SetCategory of the autoStore to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.CategoryAutoStores.
func (o *AutoStore) SetCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AutoPartsCategory) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"auto_stores\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"category_id"}),
		strmangle.WhereClause("\"", "\"", 0, autoStorePrimaryKeyColumns),
	)
	values := []interface{}{related.CategoryID, o.StoreID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CategoryID, related.CategoryID)
	if o.R == nil {
		o.R = &autoStoreR{
			Category: related,
		}
	} else {
		o.R.Category = related
	}

	if related.R == nil {
		related.R = &autoPartsCategoryR{
			CategoryAutoStores: AutoStoreSlice{o},
		}
	} else {
		related.R.CategoryAutoStores = append(related.R.CategoryAutoStores, o)
	}

	return nil
}

// AddStoreAutoOffers adds the given related objects to the existing relationships
// of the auto_store, optionally inserting them as new records.
// Appends related to o.R.StoreAutoOffers.
// Sets related.R.Store appropriately.
func (o *AutoStore) AddStoreAutoOffers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AutoOffer) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.StoreID, o.StoreID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"auto_offers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"store_id"}),
				strmangle.WhereClause("\"", "\"", 0, autoOfferPrimaryKeyColumns),
			)
			values := []interface{}{o.StoreID, rel.OfferID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.StoreID, o.StoreID)
		}
	}

	if o.R == nil {
		o.R = &autoStoreR{
			StoreAutoOffers: related,
		}
	} else {
		o.R.StoreAutoOffers = append(o.R.StoreAutoOffers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &autoOfferR{
				Store: o,
			}
		} else {
			rel.R.Store = o
		}
	}
	return nil
}

// AutoStores retrieves all the records using an executor.
func AutoStores(mods ...qm.QueryMod) autoStoreQuery {
	mods = append(mods, qm.From("\"auto_stores\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"auto_stores\".*"})
	}

	return autoStoreQuery{q}
}

// FindAutoStore retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAutoStore(ctx context.Context, exec boil.ContextExecutor, storeID null.Int64, selectCols ...string) (*AutoStore, error) {
	autoStoreObj := &AutoStore{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"auto_stores\" where \"store_id\"=?", sel,
	)

	q := queries.Raw(query, storeID)

	err := q.Bind(ctx, exec, autoStoreObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from auto_stores")
	}

	if err = autoStoreObj.doAfterSelectHooks(ctx, exec); err != nil {
		return autoStoreObj, err
	}

	return autoStoreObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AutoStore) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no auto_stores provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(autoStoreColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	autoStoreInsertCacheMut.RLock()
	cache, cached := autoStoreInsertCache[key]
	autoStoreInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			autoStoreAllColumns,
			autoStoreColumnsWithDefault,
			autoStoreColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, autoStoreGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(autoStoreType, autoStoreMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(autoStoreType, autoStoreMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"auto_stores\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"auto_stores\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into auto_stores")
	}

	if !cached {
		autoStoreInsertCacheMut.Lock()
		autoStoreInsertCache[key] = cache
		autoStoreInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AutoStore.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AutoStore) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	autoStoreUpdateCacheMut.RLock()
	cache, cached := autoStoreUpdateCache[key]
	autoStoreUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			autoStoreAllColumns,
			autoStorePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, autoStoreGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update auto_stores, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"auto_stores\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, autoStorePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(autoStoreType, autoStoreMapping, append(wl, autoStorePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update auto_stores row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for auto_stores")
	}

	if !cached {
		autoStoreUpdateCacheMut.Lock()
		autoStoreUpdateCache[key] = cache
		autoStoreUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q autoStoreQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for auto_stores")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for auto_stores")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AutoStoreSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autoStorePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"auto_stores\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, autoStorePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in autoStore slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all autoStore")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AutoStore) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no auto_stores provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(autoStoreColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	autoStoreUpsertCacheMut.RLock()
	cache, cached := autoStoreUpsertCache[key]
	autoStoreUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			autoStoreAllColumns,
			autoStoreColumnsWithDefault,
			autoStoreColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			autoStoreAllColumns,
			autoStorePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert auto_stores, could not build update column list")
		}

		ret := strmangle.SetComplement(autoStoreAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(autoStorePrimaryKeyColumns))
			copy(conflict, autoStorePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"auto_stores\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(autoStoreType, autoStoreMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(autoStoreType, autoStoreMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert auto_stores")
	}

	if !cached {
		autoStoreUpsertCacheMut.Lock()
		autoStoreUpsertCache[key] = cache
		autoStoreUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AutoStore record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AutoStore) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AutoStore provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), autoStorePrimaryKeyMapping)
	sql := "DELETE FROM \"auto_stores\" WHERE \"store_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from auto_stores")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for auto_stores")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q autoStoreQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no autoStoreQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from auto_stores")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auto_stores")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AutoStoreSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(autoStoreBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autoStorePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"auto_stores\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, autoStorePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from autoStore slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auto_stores")
	}

	if len(autoStoreAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AutoStore) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAutoStore(ctx, exec, o.StoreID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AutoStoreSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AutoStoreSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autoStorePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"auto_stores\".* FROM \"auto_stores\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, autoStorePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AutoStoreSlice")
	}

	*o = slice

	return nil
}

// AutoStoreExists checks if the AutoStore row exists.
func AutoStoreExists(ctx context.Context, exec boil.ContextExecutor, storeID null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"auto_stores\" where \"store_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, storeID)
	}
	row := exec.QueryRowContext(ctx, sql, storeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if auto_stores exists")
	}

	return exists, nil
}

// Exists checks if the AutoStore row exists.
func (o *AutoStore) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AutoStoreExists(ctx, exec, o.StoreID)
}
