// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AutoStore is an object representing the database table.
type AutoStore struct {
	ID            int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	EmployerID    int         `boil:"employer_id" json:"employer_id" toml:"employer_id" yaml:"employer_id"`
	Name          string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Location      null.String `boil:"location" json:"location,omitempty" toml:"location" yaml:"location,omitempty"`
	ContactNumber null.Int    `boil:"contact_number" json:"contact_number,omitempty" toml:"contact_number" yaml:"contact_number,omitempty"`
	CreatedAt     null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt     null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *autoStoreR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L autoStoreL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AutoStoreColumns = struct {
	ID            string
	EmployerID    string
	Name          string
	Location      string
	ContactNumber string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "id",
	EmployerID:    "employer_id",
	Name:          "name",
	Location:      "location",
	ContactNumber: "contact_number",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

var AutoStoreTableColumns = struct {
	ID            string
	EmployerID    string
	Name          string
	Location      string
	ContactNumber string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "auto_stores.id",
	EmployerID:    "auto_stores.employer_id",
	Name:          "auto_stores.name",
	Location:      "auto_stores.location",
	ContactNumber: "auto_stores.contact_number",
	CreatedAt:     "auto_stores.created_at",
	UpdatedAt:     "auto_stores.updated_at",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AutoStoreWhere = struct {
	ID            whereHelperint
	EmployerID    whereHelperint
	Name          whereHelperstring
	Location      whereHelpernull_String
	ContactNumber whereHelpernull_Int
	CreatedAt     whereHelpernull_Time
	UpdatedAt     whereHelpernull_Time
}{
	ID:            whereHelperint{field: "\"auto_stores\".\"id\""},
	EmployerID:    whereHelperint{field: "\"auto_stores\".\"employer_id\""},
	Name:          whereHelperstring{field: "\"auto_stores\".\"name\""},
	Location:      whereHelpernull_String{field: "\"auto_stores\".\"location\""},
	ContactNumber: whereHelpernull_Int{field: "\"auto_stores\".\"contact_number\""},
	CreatedAt:     whereHelpernull_Time{field: "\"auto_stores\".\"created_at\""},
	UpdatedAt:     whereHelpernull_Time{field: "\"auto_stores\".\"updated_at\""},
}

// AutoStoreRels is where relationship names are stored.
var AutoStoreRels = struct {
	Employer       string
	AutoOffers     string
	AutoCategories string
}{
	Employer:       "Employer",
	AutoOffers:     "AutoOffers",
	AutoCategories: "AutoCategories",
}

// autoStoreR is where relationships are stored.
type autoStoreR struct {
	Employer       *Employer         `boil:"Employer" json:"Employer" toml:"Employer" yaml:"Employer"`
	AutoOffers     AutoOfferSlice    `boil:"AutoOffers" json:"AutoOffers" toml:"AutoOffers" yaml:"AutoOffers"`
	AutoCategories AutoCategorySlice `boil:"AutoCategories" json:"AutoCategories" toml:"AutoCategories" yaml:"AutoCategories"`
}

// NewStruct creates a new relationship struct
func (*autoStoreR) NewStruct() *autoStoreR {
	return &autoStoreR{}
}

func (r *autoStoreR) GetEmployer() *Employer {
	if r == nil {
		return nil
	}
	return r.Employer
}

func (r *autoStoreR) GetAutoOffers() AutoOfferSlice {
	if r == nil {
		return nil
	}
	return r.AutoOffers
}

func (r *autoStoreR) GetAutoCategories() AutoCategorySlice {
	if r == nil {
		return nil
	}
	return r.AutoCategories
}

// autoStoreL is where Load methods for each relationship are stored.
type autoStoreL struct{}

var (
	autoStoreAllColumns            = []string{"id", "employer_id", "name", "location", "contact_number", "created_at", "updated_at"}
	autoStoreColumnsWithoutDefault = []string{"employer_id", "name"}
	autoStoreColumnsWithDefault    = []string{"id", "location", "contact_number", "created_at", "updated_at"}
	autoStorePrimaryKeyColumns     = []string{"id"}
	autoStoreGeneratedColumns      = []string{}
)

type (
	// AutoStoreSlice is an alias for a slice of pointers to AutoStore.
	// This should almost always be used instead of []AutoStore.
	AutoStoreSlice []*AutoStore
	// AutoStoreHook is the signature for custom AutoStore hook methods
	AutoStoreHook func(context.Context, boil.ContextExecutor, *AutoStore) error

	autoStoreQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	autoStoreType                 = reflect.TypeOf(&AutoStore{})
	autoStoreMapping              = queries.MakeStructMapping(autoStoreType)
	autoStorePrimaryKeyMapping, _ = queries.BindMapping(autoStoreType, autoStoreMapping, autoStorePrimaryKeyColumns)
	autoStoreInsertCacheMut       sync.RWMutex
	autoStoreInsertCache          = make(map[string]insertCache)
	autoStoreUpdateCacheMut       sync.RWMutex
	autoStoreUpdateCache          = make(map[string]updateCache)
	autoStoreUpsertCacheMut       sync.RWMutex
	autoStoreUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var autoStoreAfterSelectMu sync.Mutex
var autoStoreAfterSelectHooks []AutoStoreHook

var autoStoreBeforeInsertMu sync.Mutex
var autoStoreBeforeInsertHooks []AutoStoreHook
var autoStoreAfterInsertMu sync.Mutex
var autoStoreAfterInsertHooks []AutoStoreHook

var autoStoreBeforeUpdateMu sync.Mutex
var autoStoreBeforeUpdateHooks []AutoStoreHook
var autoStoreAfterUpdateMu sync.Mutex
var autoStoreAfterUpdateHooks []AutoStoreHook

var autoStoreBeforeDeleteMu sync.Mutex
var autoStoreBeforeDeleteHooks []AutoStoreHook
var autoStoreAfterDeleteMu sync.Mutex
var autoStoreAfterDeleteHooks []AutoStoreHook

var autoStoreBeforeUpsertMu sync.Mutex
var autoStoreBeforeUpsertHooks []AutoStoreHook
var autoStoreAfterUpsertMu sync.Mutex
var autoStoreAfterUpsertHooks []AutoStoreHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AutoStore) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoStoreAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AutoStore) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoStoreBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AutoStore) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoStoreAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AutoStore) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoStoreBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AutoStore) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoStoreAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AutoStore) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoStoreBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AutoStore) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoStoreAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AutoStore) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoStoreBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AutoStore) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoStoreAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAutoStoreHook registers your hook function for all future operations.
func AddAutoStoreHook(hookPoint boil.HookPoint, autoStoreHook AutoStoreHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		autoStoreAfterSelectMu.Lock()
		autoStoreAfterSelectHooks = append(autoStoreAfterSelectHooks, autoStoreHook)
		autoStoreAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		autoStoreBeforeInsertMu.Lock()
		autoStoreBeforeInsertHooks = append(autoStoreBeforeInsertHooks, autoStoreHook)
		autoStoreBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		autoStoreAfterInsertMu.Lock()
		autoStoreAfterInsertHooks = append(autoStoreAfterInsertHooks, autoStoreHook)
		autoStoreAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		autoStoreBeforeUpdateMu.Lock()
		autoStoreBeforeUpdateHooks = append(autoStoreBeforeUpdateHooks, autoStoreHook)
		autoStoreBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		autoStoreAfterUpdateMu.Lock()
		autoStoreAfterUpdateHooks = append(autoStoreAfterUpdateHooks, autoStoreHook)
		autoStoreAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		autoStoreBeforeDeleteMu.Lock()
		autoStoreBeforeDeleteHooks = append(autoStoreBeforeDeleteHooks, autoStoreHook)
		autoStoreBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		autoStoreAfterDeleteMu.Lock()
		autoStoreAfterDeleteHooks = append(autoStoreAfterDeleteHooks, autoStoreHook)
		autoStoreAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		autoStoreBeforeUpsertMu.Lock()
		autoStoreBeforeUpsertHooks = append(autoStoreBeforeUpsertHooks, autoStoreHook)
		autoStoreBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		autoStoreAfterUpsertMu.Lock()
		autoStoreAfterUpsertHooks = append(autoStoreAfterUpsertHooks, autoStoreHook)
		autoStoreAfterUpsertMu.Unlock()
	}
}

// One returns a single autoStore record from the query.
func (q autoStoreQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AutoStore, error) {
	o := &AutoStore{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for auto_stores")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AutoStore records from the query.
func (q autoStoreQuery) All(ctx context.Context, exec boil.ContextExecutor) (AutoStoreSlice, error) {
	var o []*AutoStore

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AutoStore slice")
	}

	if len(autoStoreAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AutoStore records in the query.
func (q autoStoreQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count auto_stores rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q autoStoreQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if auto_stores exists")
	}

	return count > 0, nil
}

// Employer pointed to by the foreign key.
func (o *AutoStore) Employer(mods ...qm.QueryMod) employerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.EmployerID),
	}

	queryMods = append(queryMods, mods...)

	return Employers(queryMods...)
}

// AutoOffers retrieves all the auto_offer's AutoOffers with an executor.
func (o *AutoStore) AutoOffers(mods ...qm.QueryMod) autoOfferQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"auto_offers\".\"auto_store_id\"=?", o.ID),
	)

	return AutoOffers(queryMods...)
}

// AutoCategories retrieves all the auto_category's AutoCategories with an executor.
func (o *AutoStore) AutoCategories(mods ...qm.QueryMod) autoCategoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"auto_stores_categories\" on \"auto_categories\".\"id\" = \"auto_stores_categories\".\"auto_category_id\""),
		qm.Where("\"auto_stores_categories\".\"auto_store_id\"=?", o.ID),
	)

	return AutoCategories(queryMods...)
}

// LoadEmployer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (autoStoreL) LoadEmployer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAutoStore interface{}, mods queries.Applicator) error {
	var slice []*AutoStore
	var object *AutoStore

	if singular {
		var ok bool
		object, ok = maybeAutoStore.(*AutoStore)
		if !ok {
			object = new(AutoStore)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAutoStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAutoStore))
			}
		}
	} else {
		s, ok := maybeAutoStore.(*[]*AutoStore)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAutoStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAutoStore))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &autoStoreR{}
		}
		args[object.EmployerID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &autoStoreR{}
			}

			args[obj.EmployerID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`employers`),
		qm.WhereIn(`employers.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Employer")
	}

	var resultSlice []*Employer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Employer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for employers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for employers")
	}

	if len(employerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Employer = foreign
		if foreign.R == nil {
			foreign.R = &employerR{}
		}
		foreign.R.AutoStores = append(foreign.R.AutoStores, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EmployerID == foreign.ID {
				local.R.Employer = foreign
				if foreign.R == nil {
					foreign.R = &employerR{}
				}
				foreign.R.AutoStores = append(foreign.R.AutoStores, local)
				break
			}
		}
	}

	return nil
}

// LoadAutoOffers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (autoStoreL) LoadAutoOffers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAutoStore interface{}, mods queries.Applicator) error {
	var slice []*AutoStore
	var object *AutoStore

	if singular {
		var ok bool
		object, ok = maybeAutoStore.(*AutoStore)
		if !ok {
			object = new(AutoStore)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAutoStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAutoStore))
			}
		}
	} else {
		s, ok := maybeAutoStore.(*[]*AutoStore)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAutoStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAutoStore))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &autoStoreR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &autoStoreR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`auto_offers`),
		qm.WhereIn(`auto_offers.auto_store_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load auto_offers")
	}

	var resultSlice []*AutoOffer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice auto_offers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on auto_offers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auto_offers")
	}

	if len(autoOfferAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AutoOffers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &autoOfferR{}
			}
			foreign.R.AutoStore = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AutoStoreID {
				local.R.AutoOffers = append(local.R.AutoOffers, foreign)
				if foreign.R == nil {
					foreign.R = &autoOfferR{}
				}
				foreign.R.AutoStore = local
				break
			}
		}
	}

	return nil
}

// LoadAutoCategories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (autoStoreL) LoadAutoCategories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAutoStore interface{}, mods queries.Applicator) error {
	var slice []*AutoStore
	var object *AutoStore

	if singular {
		var ok bool
		object, ok = maybeAutoStore.(*AutoStore)
		if !ok {
			object = new(AutoStore)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAutoStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAutoStore))
			}
		}
	} else {
		s, ok := maybeAutoStore.(*[]*AutoStore)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAutoStore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAutoStore))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &autoStoreR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &autoStoreR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.Select("\"auto_categories\".\"id\", \"auto_categories\".\"name\", \"auto_categories\".\"created_at\", \"auto_categories\".\"updated_at\", \"a\".\"auto_store_id\""),
		qm.From("\"auto_categories\""),
		qm.InnerJoin("\"auto_stores_categories\" as \"a\" on \"auto_categories\".\"id\" = \"a\".\"auto_category_id\""),
		qm.WhereIn("\"a\".\"auto_store_id\" in ?", argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load auto_categories")
	}

	var resultSlice []*AutoCategory

	var localJoinCols []int
	for results.Next() {
		one := new(AutoCategory)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Name, &one.CreatedAt, &one.UpdatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for auto_categories")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice auto_categories")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on auto_categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auto_categories")
	}

	if len(autoCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AutoCategories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &autoCategoryR{}
			}
			foreign.R.AutoStores = append(foreign.R.AutoStores, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.AutoCategories = append(local.R.AutoCategories, foreign)
				if foreign.R == nil {
					foreign.R = &autoCategoryR{}
				}
				foreign.R.AutoStores = append(foreign.R.AutoStores, local)
				break
			}
		}
	}

	return nil
}

// SetEmployer of the autoStore to the related item.
// Sets o.R.Employer to related.
// Adds o to related.R.AutoStores.
func (o *AutoStore) SetEmployer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Employer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"auto_stores\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"employer_id"}),
		strmangle.WhereClause("\"", "\"", 2, autoStorePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EmployerID = related.ID
	if o.R == nil {
		o.R = &autoStoreR{
			Employer: related,
		}
	} else {
		o.R.Employer = related
	}

	if related.R == nil {
		related.R = &employerR{
			AutoStores: AutoStoreSlice{o},
		}
	} else {
		related.R.AutoStores = append(related.R.AutoStores, o)
	}

	return nil
}

// AddAutoOffers adds the given related objects to the existing relationships
// of the auto_store, optionally inserting them as new records.
// Appends related to o.R.AutoOffers.
// Sets related.R.AutoStore appropriately.
func (o *AutoStore) AddAutoOffers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AutoOffer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AutoStoreID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"auto_offers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"auto_store_id"}),
				strmangle.WhereClause("\"", "\"", 2, autoOfferPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AutoStoreID = o.ID
		}
	}

	if o.R == nil {
		o.R = &autoStoreR{
			AutoOffers: related,
		}
	} else {
		o.R.AutoOffers = append(o.R.AutoOffers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &autoOfferR{
				AutoStore: o,
			}
		} else {
			rel.R.AutoStore = o
		}
	}
	return nil
}

// AddAutoCategories adds the given related objects to the existing relationships
// of the auto_store, optionally inserting them as new records.
// Appends related to o.R.AutoCategories.
// Sets related.R.AutoStores appropriately.
func (o *AutoStore) AddAutoCategories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AutoCategory) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"auto_stores_categories\" (\"auto_store_id\", \"auto_category_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &autoStoreR{
			AutoCategories: related,
		}
	} else {
		o.R.AutoCategories = append(o.R.AutoCategories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &autoCategoryR{
				AutoStores: AutoStoreSlice{o},
			}
		} else {
			rel.R.AutoStores = append(rel.R.AutoStores, o)
		}
	}
	return nil
}

// SetAutoCategories removes all previously related items of the
// auto_store replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AutoStores's AutoCategories accordingly.
// Replaces o.R.AutoCategories with related.
// Sets related.R.AutoStores's AutoCategories accordingly.
func (o *AutoStore) SetAutoCategories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AutoCategory) error {
	query := "delete from \"auto_stores_categories\" where \"auto_store_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeAutoCategoriesFromAutoStoresSlice(o, related)
	if o.R != nil {
		o.R.AutoCategories = nil
	}

	return o.AddAutoCategories(ctx, exec, insert, related...)
}

// RemoveAutoCategories relationships from objects passed in.
// Removes related items from R.AutoCategories (uses pointer comparison, removal does not keep order)
// Sets related.R.AutoStores.
func (o *AutoStore) RemoveAutoCategories(ctx context.Context, exec boil.ContextExecutor, related ...*AutoCategory) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"auto_stores_categories\" where \"auto_store_id\" = $1 and \"auto_category_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeAutoCategoriesFromAutoStoresSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AutoCategories {
			if rel != ri {
				continue
			}

			ln := len(o.R.AutoCategories)
			if ln > 1 && i < ln-1 {
				o.R.AutoCategories[i] = o.R.AutoCategories[ln-1]
			}
			o.R.AutoCategories = o.R.AutoCategories[:ln-1]
			break
		}
	}

	return nil
}

func removeAutoCategoriesFromAutoStoresSlice(o *AutoStore, related []*AutoCategory) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.AutoStores {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.AutoStores)
			if ln > 1 && i < ln-1 {
				rel.R.AutoStores[i] = rel.R.AutoStores[ln-1]
			}
			rel.R.AutoStores = rel.R.AutoStores[:ln-1]
			break
		}
	}
}

// AutoStores retrieves all the records using an executor.
func AutoStores(mods ...qm.QueryMod) autoStoreQuery {
	mods = append(mods, qm.From("\"auto_stores\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"auto_stores\".*"})
	}

	return autoStoreQuery{q}
}

// FindAutoStore retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAutoStore(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AutoStore, error) {
	autoStoreObj := &AutoStore{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"auto_stores\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, autoStoreObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from auto_stores")
	}

	if err = autoStoreObj.doAfterSelectHooks(ctx, exec); err != nil {
		return autoStoreObj, err
	}

	return autoStoreObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AutoStore) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no auto_stores provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(autoStoreColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	autoStoreInsertCacheMut.RLock()
	cache, cached := autoStoreInsertCache[key]
	autoStoreInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			autoStoreAllColumns,
			autoStoreColumnsWithDefault,
			autoStoreColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(autoStoreType, autoStoreMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(autoStoreType, autoStoreMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"auto_stores\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"auto_stores\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into auto_stores")
	}

	if !cached {
		autoStoreInsertCacheMut.Lock()
		autoStoreInsertCache[key] = cache
		autoStoreInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AutoStore.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AutoStore) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	autoStoreUpdateCacheMut.RLock()
	cache, cached := autoStoreUpdateCache[key]
	autoStoreUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			autoStoreAllColumns,
			autoStorePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update auto_stores, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"auto_stores\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, autoStorePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(autoStoreType, autoStoreMapping, append(wl, autoStorePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update auto_stores row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for auto_stores")
	}

	if !cached {
		autoStoreUpdateCacheMut.Lock()
		autoStoreUpdateCache[key] = cache
		autoStoreUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q autoStoreQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for auto_stores")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for auto_stores")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AutoStoreSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autoStorePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"auto_stores\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, autoStorePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in autoStore slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all autoStore")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AutoStore) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no auto_stores provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(autoStoreColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	autoStoreUpsertCacheMut.RLock()
	cache, cached := autoStoreUpsertCache[key]
	autoStoreUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			autoStoreAllColumns,
			autoStoreColumnsWithDefault,
			autoStoreColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			autoStoreAllColumns,
			autoStorePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert auto_stores, could not build update column list")
		}

		ret := strmangle.SetComplement(autoStoreAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(autoStorePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert auto_stores, could not build conflict column list")
			}

			conflict = make([]string, len(autoStorePrimaryKeyColumns))
			copy(conflict, autoStorePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"auto_stores\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(autoStoreType, autoStoreMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(autoStoreType, autoStoreMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert auto_stores")
	}

	if !cached {
		autoStoreUpsertCacheMut.Lock()
		autoStoreUpsertCache[key] = cache
		autoStoreUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AutoStore record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AutoStore) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AutoStore provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), autoStorePrimaryKeyMapping)
	sql := "DELETE FROM \"auto_stores\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from auto_stores")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for auto_stores")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q autoStoreQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no autoStoreQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from auto_stores")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auto_stores")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AutoStoreSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(autoStoreBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autoStorePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"auto_stores\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, autoStorePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from autoStore slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auto_stores")
	}

	if len(autoStoreAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AutoStore) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAutoStore(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AutoStoreSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AutoStoreSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autoStorePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"auto_stores\".* FROM \"auto_stores\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, autoStorePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AutoStoreSlice")
	}

	*o = slice

	return nil
}

// AutoStoreExists checks if the AutoStore row exists.
func AutoStoreExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"auto_stores\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if auto_stores exists")
	}

	return exists, nil
}

// Exists checks if the AutoStore row exists.
func (o *AutoStore) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AutoStoreExists(ctx, exec, o.ID)
}
