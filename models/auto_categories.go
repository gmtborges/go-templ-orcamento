// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AutoCategory is an object representing the database table.
type AutoCategory struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *autoCategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L autoCategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AutoCategoryColumns = struct {
	ID        string
	Name      string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Name:      "name",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var AutoCategoryTableColumns = struct {
	ID        string
	Name      string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "auto_categories.id",
	Name:      "auto_categories.name",
	CreatedAt: "auto_categories.created_at",
	UpdatedAt: "auto_categories.updated_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AutoCategoryWhere = struct {
	ID        whereHelperint
	Name      whereHelperstring
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
}{
	ID:        whereHelperint{field: "\"auto_categories\".\"id\""},
	Name:      whereHelperstring{field: "\"auto_categories\".\"name\""},
	CreatedAt: whereHelpernull_Time{field: "\"auto_categories\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"auto_categories\".\"updated_at\""},
}

// AutoCategoryRels is where relationship names are stored.
var AutoCategoryRels = struct {
	Companies        string
	CategoryBiddings string
}{
	Companies:        "Companies",
	CategoryBiddings: "CategoryBiddings",
}

// autoCategoryR is where relationships are stored.
type autoCategoryR struct {
	Companies        CompanySlice `boil:"Companies" json:"Companies" toml:"Companies" yaml:"Companies"`
	CategoryBiddings BiddingSlice `boil:"CategoryBiddings" json:"CategoryBiddings" toml:"CategoryBiddings" yaml:"CategoryBiddings"`
}

// NewStruct creates a new relationship struct
func (*autoCategoryR) NewStruct() *autoCategoryR {
	return &autoCategoryR{}
}

func (r *autoCategoryR) GetCompanies() CompanySlice {
	if r == nil {
		return nil
	}
	return r.Companies
}

func (r *autoCategoryR) GetCategoryBiddings() BiddingSlice {
	if r == nil {
		return nil
	}
	return r.CategoryBiddings
}

// autoCategoryL is where Load methods for each relationship are stored.
type autoCategoryL struct{}

var (
	autoCategoryAllColumns            = []string{"id", "name", "created_at", "updated_at"}
	autoCategoryColumnsWithoutDefault = []string{"name"}
	autoCategoryColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	autoCategoryPrimaryKeyColumns     = []string{"id"}
	autoCategoryGeneratedColumns      = []string{}
)

type (
	// AutoCategorySlice is an alias for a slice of pointers to AutoCategory.
	// This should almost always be used instead of []AutoCategory.
	AutoCategorySlice []*AutoCategory
	// AutoCategoryHook is the signature for custom AutoCategory hook methods
	AutoCategoryHook func(context.Context, boil.ContextExecutor, *AutoCategory) error

	autoCategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	autoCategoryType                 = reflect.TypeOf(&AutoCategory{})
	autoCategoryMapping              = queries.MakeStructMapping(autoCategoryType)
	autoCategoryPrimaryKeyMapping, _ = queries.BindMapping(autoCategoryType, autoCategoryMapping, autoCategoryPrimaryKeyColumns)
	autoCategoryInsertCacheMut       sync.RWMutex
	autoCategoryInsertCache          = make(map[string]insertCache)
	autoCategoryUpdateCacheMut       sync.RWMutex
	autoCategoryUpdateCache          = make(map[string]updateCache)
	autoCategoryUpsertCacheMut       sync.RWMutex
	autoCategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var autoCategoryAfterSelectMu sync.Mutex
var autoCategoryAfterSelectHooks []AutoCategoryHook

var autoCategoryBeforeInsertMu sync.Mutex
var autoCategoryBeforeInsertHooks []AutoCategoryHook
var autoCategoryAfterInsertMu sync.Mutex
var autoCategoryAfterInsertHooks []AutoCategoryHook

var autoCategoryBeforeUpdateMu sync.Mutex
var autoCategoryBeforeUpdateHooks []AutoCategoryHook
var autoCategoryAfterUpdateMu sync.Mutex
var autoCategoryAfterUpdateHooks []AutoCategoryHook

var autoCategoryBeforeDeleteMu sync.Mutex
var autoCategoryBeforeDeleteHooks []AutoCategoryHook
var autoCategoryAfterDeleteMu sync.Mutex
var autoCategoryAfterDeleteHooks []AutoCategoryHook

var autoCategoryBeforeUpsertMu sync.Mutex
var autoCategoryBeforeUpsertHooks []AutoCategoryHook
var autoCategoryAfterUpsertMu sync.Mutex
var autoCategoryAfterUpsertHooks []AutoCategoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AutoCategory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoCategoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AutoCategory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoCategoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AutoCategory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoCategoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AutoCategory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoCategoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AutoCategory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoCategoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AutoCategory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoCategoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AutoCategory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoCategoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AutoCategory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoCategoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AutoCategory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoCategoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAutoCategoryHook registers your hook function for all future operations.
func AddAutoCategoryHook(hookPoint boil.HookPoint, autoCategoryHook AutoCategoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		autoCategoryAfterSelectMu.Lock()
		autoCategoryAfterSelectHooks = append(autoCategoryAfterSelectHooks, autoCategoryHook)
		autoCategoryAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		autoCategoryBeforeInsertMu.Lock()
		autoCategoryBeforeInsertHooks = append(autoCategoryBeforeInsertHooks, autoCategoryHook)
		autoCategoryBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		autoCategoryAfterInsertMu.Lock()
		autoCategoryAfterInsertHooks = append(autoCategoryAfterInsertHooks, autoCategoryHook)
		autoCategoryAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		autoCategoryBeforeUpdateMu.Lock()
		autoCategoryBeforeUpdateHooks = append(autoCategoryBeforeUpdateHooks, autoCategoryHook)
		autoCategoryBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		autoCategoryAfterUpdateMu.Lock()
		autoCategoryAfterUpdateHooks = append(autoCategoryAfterUpdateHooks, autoCategoryHook)
		autoCategoryAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		autoCategoryBeforeDeleteMu.Lock()
		autoCategoryBeforeDeleteHooks = append(autoCategoryBeforeDeleteHooks, autoCategoryHook)
		autoCategoryBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		autoCategoryAfterDeleteMu.Lock()
		autoCategoryAfterDeleteHooks = append(autoCategoryAfterDeleteHooks, autoCategoryHook)
		autoCategoryAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		autoCategoryBeforeUpsertMu.Lock()
		autoCategoryBeforeUpsertHooks = append(autoCategoryBeforeUpsertHooks, autoCategoryHook)
		autoCategoryBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		autoCategoryAfterUpsertMu.Lock()
		autoCategoryAfterUpsertHooks = append(autoCategoryAfterUpsertHooks, autoCategoryHook)
		autoCategoryAfterUpsertMu.Unlock()
	}
}

// One returns a single autoCategory record from the query.
func (q autoCategoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AutoCategory, error) {
	o := &AutoCategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for auto_categories")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AutoCategory records from the query.
func (q autoCategoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (AutoCategorySlice, error) {
	var o []*AutoCategory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AutoCategory slice")
	}

	if len(autoCategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AutoCategory records in the query.
func (q autoCategoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count auto_categories rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q autoCategoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if auto_categories exists")
	}

	return count > 0, nil
}

// Companies retrieves all the company's Companies with an executor.
func (o *AutoCategory) Companies(mods ...qm.QueryMod) companyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"auto_stores_categories\" on \"companies\".\"id\" = \"auto_stores_categories\".\"company_id\""),
		qm.Where("\"auto_stores_categories\".\"auto_category_id\"=?", o.ID),
	)

	return Companies(queryMods...)
}

// CategoryBiddings retrieves all the bidding's Biddings with an executor via category_id column.
func (o *AutoCategory) CategoryBiddings(mods ...qm.QueryMod) biddingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"biddings\".\"category_id\"=?", o.ID),
	)

	return Biddings(queryMods...)
}

// LoadCompanies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (autoCategoryL) LoadCompanies(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAutoCategory interface{}, mods queries.Applicator) error {
	var slice []*AutoCategory
	var object *AutoCategory

	if singular {
		var ok bool
		object, ok = maybeAutoCategory.(*AutoCategory)
		if !ok {
			object = new(AutoCategory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAutoCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAutoCategory))
			}
		}
	} else {
		s, ok := maybeAutoCategory.(*[]*AutoCategory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAutoCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAutoCategory))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &autoCategoryR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &autoCategoryR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.Select("\"companies\".\"id\", \"companies\".\"name\", \"companies\".\"type\", \"companies\".\"address\", \"companies\".\"contact_number\", \"companies\".\"created_at\", \"companies\".\"updated_at\", \"a\".\"auto_category_id\""),
		qm.From("\"companies\""),
		qm.InnerJoin("\"auto_stores_categories\" as \"a\" on \"companies\".\"id\" = \"a\".\"company_id\""),
		qm.WhereIn("\"a\".\"auto_category_id\" in ?", argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load companies")
	}

	var resultSlice []*Company

	var localJoinCols []int
	for results.Next() {
		one := new(Company)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Name, &one.Type, &one.Address, &one.ContactNumber, &one.CreatedAt, &one.UpdatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for companies")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice companies")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on companies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for companies")
	}

	if len(companyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Companies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &companyR{}
			}
			foreign.R.AutoCategories = append(foreign.R.AutoCategories, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Companies = append(local.R.Companies, foreign)
				if foreign.R == nil {
					foreign.R = &companyR{}
				}
				foreign.R.AutoCategories = append(foreign.R.AutoCategories, local)
				break
			}
		}
	}

	return nil
}

// LoadCategoryBiddings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (autoCategoryL) LoadCategoryBiddings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAutoCategory interface{}, mods queries.Applicator) error {
	var slice []*AutoCategory
	var object *AutoCategory

	if singular {
		var ok bool
		object, ok = maybeAutoCategory.(*AutoCategory)
		if !ok {
			object = new(AutoCategory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAutoCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAutoCategory))
			}
		}
	} else {
		s, ok := maybeAutoCategory.(*[]*AutoCategory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAutoCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAutoCategory))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &autoCategoryR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &autoCategoryR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`biddings`),
		qm.WhereIn(`biddings.category_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load biddings")
	}

	var resultSlice []*Bidding
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice biddings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on biddings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for biddings")
	}

	if len(biddingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CategoryBiddings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &biddingR{}
			}
			foreign.R.Category = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CategoryID {
				local.R.CategoryBiddings = append(local.R.CategoryBiddings, foreign)
				if foreign.R == nil {
					foreign.R = &biddingR{}
				}
				foreign.R.Category = local
				break
			}
		}
	}

	return nil
}

// AddCompanies adds the given related objects to the existing relationships
// of the auto_category, optionally inserting them as new records.
// Appends related to o.R.Companies.
// Sets related.R.AutoCategories appropriately.
func (o *AutoCategory) AddCompanies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Company) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"auto_stores_categories\" (\"auto_category_id\", \"company_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &autoCategoryR{
			Companies: related,
		}
	} else {
		o.R.Companies = append(o.R.Companies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &companyR{
				AutoCategories: AutoCategorySlice{o},
			}
		} else {
			rel.R.AutoCategories = append(rel.R.AutoCategories, o)
		}
	}
	return nil
}

// SetCompanies removes all previously related items of the
// auto_category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AutoCategories's Companies accordingly.
// Replaces o.R.Companies with related.
// Sets related.R.AutoCategories's Companies accordingly.
func (o *AutoCategory) SetCompanies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Company) error {
	query := "delete from \"auto_stores_categories\" where \"auto_category_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeCompaniesFromAutoCategoriesSlice(o, related)
	if o.R != nil {
		o.R.Companies = nil
	}

	return o.AddCompanies(ctx, exec, insert, related...)
}

// RemoveCompanies relationships from objects passed in.
// Removes related items from R.Companies (uses pointer comparison, removal does not keep order)
// Sets related.R.AutoCategories.
func (o *AutoCategory) RemoveCompanies(ctx context.Context, exec boil.ContextExecutor, related ...*Company) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"auto_stores_categories\" where \"auto_category_id\" = $1 and \"company_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeCompaniesFromAutoCategoriesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Companies {
			if rel != ri {
				continue
			}

			ln := len(o.R.Companies)
			if ln > 1 && i < ln-1 {
				o.R.Companies[i] = o.R.Companies[ln-1]
			}
			o.R.Companies = o.R.Companies[:ln-1]
			break
		}
	}

	return nil
}

func removeCompaniesFromAutoCategoriesSlice(o *AutoCategory, related []*Company) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.AutoCategories {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.AutoCategories)
			if ln > 1 && i < ln-1 {
				rel.R.AutoCategories[i] = rel.R.AutoCategories[ln-1]
			}
			rel.R.AutoCategories = rel.R.AutoCategories[:ln-1]
			break
		}
	}
}

// AddCategoryBiddings adds the given related objects to the existing relationships
// of the auto_category, optionally inserting them as new records.
// Appends related to o.R.CategoryBiddings.
// Sets related.R.Category appropriately.
func (o *AutoCategory) AddCategoryBiddings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Bidding) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CategoryID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"biddings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"category_id"}),
				strmangle.WhereClause("\"", "\"", 2, biddingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CategoryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &autoCategoryR{
			CategoryBiddings: related,
		}
	} else {
		o.R.CategoryBiddings = append(o.R.CategoryBiddings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &biddingR{
				Category: o,
			}
		} else {
			rel.R.Category = o
		}
	}
	return nil
}

// AutoCategories retrieves all the records using an executor.
func AutoCategories(mods ...qm.QueryMod) autoCategoryQuery {
	mods = append(mods, qm.From("\"auto_categories\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"auto_categories\".*"})
	}

	return autoCategoryQuery{q}
}

// FindAutoCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAutoCategory(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AutoCategory, error) {
	autoCategoryObj := &AutoCategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"auto_categories\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, autoCategoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from auto_categories")
	}

	if err = autoCategoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return autoCategoryObj, err
	}

	return autoCategoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AutoCategory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no auto_categories provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(autoCategoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	autoCategoryInsertCacheMut.RLock()
	cache, cached := autoCategoryInsertCache[key]
	autoCategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			autoCategoryAllColumns,
			autoCategoryColumnsWithDefault,
			autoCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(autoCategoryType, autoCategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(autoCategoryType, autoCategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"auto_categories\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"auto_categories\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into auto_categories")
	}

	if !cached {
		autoCategoryInsertCacheMut.Lock()
		autoCategoryInsertCache[key] = cache
		autoCategoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AutoCategory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AutoCategory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	autoCategoryUpdateCacheMut.RLock()
	cache, cached := autoCategoryUpdateCache[key]
	autoCategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			autoCategoryAllColumns,
			autoCategoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update auto_categories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"auto_categories\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, autoCategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(autoCategoryType, autoCategoryMapping, append(wl, autoCategoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update auto_categories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for auto_categories")
	}

	if !cached {
		autoCategoryUpdateCacheMut.Lock()
		autoCategoryUpdateCache[key] = cache
		autoCategoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q autoCategoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for auto_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for auto_categories")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AutoCategorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autoCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"auto_categories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, autoCategoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in autoCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all autoCategory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AutoCategory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no auto_categories provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(autoCategoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	autoCategoryUpsertCacheMut.RLock()
	cache, cached := autoCategoryUpsertCache[key]
	autoCategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			autoCategoryAllColumns,
			autoCategoryColumnsWithDefault,
			autoCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			autoCategoryAllColumns,
			autoCategoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert auto_categories, could not build update column list")
		}

		ret := strmangle.SetComplement(autoCategoryAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(autoCategoryPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert auto_categories, could not build conflict column list")
			}

			conflict = make([]string, len(autoCategoryPrimaryKeyColumns))
			copy(conflict, autoCategoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"auto_categories\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(autoCategoryType, autoCategoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(autoCategoryType, autoCategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert auto_categories")
	}

	if !cached {
		autoCategoryUpsertCacheMut.Lock()
		autoCategoryUpsertCache[key] = cache
		autoCategoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AutoCategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AutoCategory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AutoCategory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), autoCategoryPrimaryKeyMapping)
	sql := "DELETE FROM \"auto_categories\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from auto_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for auto_categories")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q autoCategoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no autoCategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from auto_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auto_categories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AutoCategorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(autoCategoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autoCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"auto_categories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, autoCategoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from autoCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auto_categories")
	}

	if len(autoCategoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AutoCategory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAutoCategory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AutoCategorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AutoCategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autoCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"auto_categories\".* FROM \"auto_categories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, autoCategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AutoCategorySlice")
	}

	*o = slice

	return nil
}

// AutoCategoryExists checks if the AutoCategory row exists.
func AutoCategoryExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"auto_categories\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if auto_categories exists")
	}

	return exists, nil
}

// Exists checks if the AutoCategory row exists.
func (o *AutoCategory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AutoCategoryExists(ctx, exec, o.ID)
}
