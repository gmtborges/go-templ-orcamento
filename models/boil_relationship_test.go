// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AutoOfferToAutoStoreUsingAutoStore", testAutoOfferToOneAutoStoreUsingAutoStore)
	t.Run("AutoOfferToBiddingUsingBidding", testAutoOfferToOneBiddingUsingBidding)
	t.Run("AutoStoreToEmployerUsingEmployer", testAutoStoreToOneEmployerUsingEmployer)
	t.Run("BiddingToAutoCategoryUsingCategory", testBiddingToOneAutoCategoryUsingCategory)
	t.Run("BiddingToCompanyUsingCompany", testBiddingToOneCompanyUsingCompany)
	t.Run("CompanyToEmployerUsingEmployer", testCompanyToOneEmployerUsingEmployer)
	t.Run("UserToEmployerUsingEmployer", testUserToOneEmployerUsingEmployer)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AutoCategoryToAutoStores", testAutoCategoryToManyAutoStores)
	t.Run("AutoCategoryToCategoryBiddings", testAutoCategoryToManyCategoryBiddings)
	t.Run("AutoStoreToAutoOffers", testAutoStoreToManyAutoOffers)
	t.Run("AutoStoreToAutoCategories", testAutoStoreToManyAutoCategories)
	t.Run("BiddingToAutoOffers", testBiddingToManyAutoOffers)
	t.Run("CompanyToBiddings", testCompanyToManyBiddings)
	t.Run("EmployerToAutoStores", testEmployerToManyAutoStores)
	t.Run("EmployerToCompanies", testEmployerToManyCompanies)
	t.Run("EmployerToUsers", testEmployerToManyUsers)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AutoOfferToAutoStoreUsingAutoOffers", testAutoOfferToOneSetOpAutoStoreUsingAutoStore)
	t.Run("AutoOfferToBiddingUsingAutoOffers", testAutoOfferToOneSetOpBiddingUsingBidding)
	t.Run("AutoStoreToEmployerUsingAutoStores", testAutoStoreToOneSetOpEmployerUsingEmployer)
	t.Run("BiddingToAutoCategoryUsingCategoryBiddings", testBiddingToOneSetOpAutoCategoryUsingCategory)
	t.Run("BiddingToCompanyUsingBiddings", testBiddingToOneSetOpCompanyUsingCompany)
	t.Run("CompanyToEmployerUsingCompanies", testCompanyToOneSetOpEmployerUsingEmployer)
	t.Run("UserToEmployerUsingUsers", testUserToOneSetOpEmployerUsingEmployer)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AutoCategoryToAutoStores", testAutoCategoryToManyAddOpAutoStores)
	t.Run("AutoCategoryToCategoryBiddings", testAutoCategoryToManyAddOpCategoryBiddings)
	t.Run("AutoStoreToAutoOffers", testAutoStoreToManyAddOpAutoOffers)
	t.Run("AutoStoreToAutoCategories", testAutoStoreToManyAddOpAutoCategories)
	t.Run("BiddingToAutoOffers", testBiddingToManyAddOpAutoOffers)
	t.Run("CompanyToBiddings", testCompanyToManyAddOpBiddings)
	t.Run("EmployerToAutoStores", testEmployerToManyAddOpAutoStores)
	t.Run("EmployerToCompanies", testEmployerToManyAddOpCompanies)
	t.Run("EmployerToUsers", testEmployerToManyAddOpUsers)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("AutoCategoryToAutoStores", testAutoCategoryToManySetOpAutoStores)
	t.Run("AutoStoreToAutoCategories", testAutoStoreToManySetOpAutoCategories)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("AutoCategoryToAutoStores", testAutoCategoryToManyRemoveOpAutoStores)
	t.Run("AutoStoreToAutoCategories", testAutoStoreToManyRemoveOpAutoCategories)
}
