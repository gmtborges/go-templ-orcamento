// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AutoPartsCategory is an object representing the database table.
type AutoPartsCategory struct {
	CategoryID   null.Int64 `boil:"category_id" json:"category_id,omitempty" toml:"category_id" yaml:"category_id,omitempty"`
	CategoryName string     `boil:"category_name" json:"category_name" toml:"category_name" yaml:"category_name"`
	CreatedAt    null.Time  `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt    null.Time  `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *autoPartsCategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L autoPartsCategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AutoPartsCategoryColumns = struct {
	CategoryID   string
	CategoryName string
	CreatedAt    string
	UpdatedAt    string
}{
	CategoryID:   "category_id",
	CategoryName: "category_name",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
}

var AutoPartsCategoryTableColumns = struct {
	CategoryID   string
	CategoryName string
	CreatedAt    string
	UpdatedAt    string
}{
	CategoryID:   "auto_parts_categories.category_id",
	CategoryName: "auto_parts_categories.category_name",
	CreatedAt:    "auto_parts_categories.created_at",
	UpdatedAt:    "auto_parts_categories.updated_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod  { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var AutoPartsCategoryWhere = struct {
	CategoryID   whereHelpernull_Int64
	CategoryName whereHelperstring
	CreatedAt    whereHelpernull_Time
	UpdatedAt    whereHelpernull_Time
}{
	CategoryID:   whereHelpernull_Int64{field: "\"auto_parts_categories\".\"category_id\""},
	CategoryName: whereHelperstring{field: "\"auto_parts_categories\".\"category_name\""},
	CreatedAt:    whereHelpernull_Time{field: "\"auto_parts_categories\".\"created_at\""},
	UpdatedAt:    whereHelpernull_Time{field: "\"auto_parts_categories\".\"updated_at\""},
}

// AutoPartsCategoryRels is where relationship names are stored.
var AutoPartsCategoryRels = struct {
	CategoryAutoStores string
	CategoryBiddings   string
}{
	CategoryAutoStores: "CategoryAutoStores",
	CategoryBiddings:   "CategoryBiddings",
}

// autoPartsCategoryR is where relationships are stored.
type autoPartsCategoryR struct {
	CategoryAutoStores AutoStoreSlice `boil:"CategoryAutoStores" json:"CategoryAutoStores" toml:"CategoryAutoStores" yaml:"CategoryAutoStores"`
	CategoryBiddings   BiddingSlice   `boil:"CategoryBiddings" json:"CategoryBiddings" toml:"CategoryBiddings" yaml:"CategoryBiddings"`
}

// NewStruct creates a new relationship struct
func (*autoPartsCategoryR) NewStruct() *autoPartsCategoryR {
	return &autoPartsCategoryR{}
}

func (r *autoPartsCategoryR) GetCategoryAutoStores() AutoStoreSlice {
	if r == nil {
		return nil
	}
	return r.CategoryAutoStores
}

func (r *autoPartsCategoryR) GetCategoryBiddings() BiddingSlice {
	if r == nil {
		return nil
	}
	return r.CategoryBiddings
}

// autoPartsCategoryL is where Load methods for each relationship are stored.
type autoPartsCategoryL struct{}

var (
	autoPartsCategoryAllColumns            = []string{"category_id", "category_name", "created_at", "updated_at"}
	autoPartsCategoryColumnsWithoutDefault = []string{"category_name"}
	autoPartsCategoryColumnsWithDefault    = []string{"category_id", "created_at", "updated_at"}
	autoPartsCategoryPrimaryKeyColumns     = []string{"category_id"}
	autoPartsCategoryGeneratedColumns      = []string{"category_id"}
)

type (
	// AutoPartsCategorySlice is an alias for a slice of pointers to AutoPartsCategory.
	// This should almost always be used instead of []AutoPartsCategory.
	AutoPartsCategorySlice []*AutoPartsCategory
	// AutoPartsCategoryHook is the signature for custom AutoPartsCategory hook methods
	AutoPartsCategoryHook func(context.Context, boil.ContextExecutor, *AutoPartsCategory) error

	autoPartsCategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	autoPartsCategoryType                 = reflect.TypeOf(&AutoPartsCategory{})
	autoPartsCategoryMapping              = queries.MakeStructMapping(autoPartsCategoryType)
	autoPartsCategoryPrimaryKeyMapping, _ = queries.BindMapping(autoPartsCategoryType, autoPartsCategoryMapping, autoPartsCategoryPrimaryKeyColumns)
	autoPartsCategoryInsertCacheMut       sync.RWMutex
	autoPartsCategoryInsertCache          = make(map[string]insertCache)
	autoPartsCategoryUpdateCacheMut       sync.RWMutex
	autoPartsCategoryUpdateCache          = make(map[string]updateCache)
	autoPartsCategoryUpsertCacheMut       sync.RWMutex
	autoPartsCategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var autoPartsCategoryAfterSelectMu sync.Mutex
var autoPartsCategoryAfterSelectHooks []AutoPartsCategoryHook

var autoPartsCategoryBeforeInsertMu sync.Mutex
var autoPartsCategoryBeforeInsertHooks []AutoPartsCategoryHook
var autoPartsCategoryAfterInsertMu sync.Mutex
var autoPartsCategoryAfterInsertHooks []AutoPartsCategoryHook

var autoPartsCategoryBeforeUpdateMu sync.Mutex
var autoPartsCategoryBeforeUpdateHooks []AutoPartsCategoryHook
var autoPartsCategoryAfterUpdateMu sync.Mutex
var autoPartsCategoryAfterUpdateHooks []AutoPartsCategoryHook

var autoPartsCategoryBeforeDeleteMu sync.Mutex
var autoPartsCategoryBeforeDeleteHooks []AutoPartsCategoryHook
var autoPartsCategoryAfterDeleteMu sync.Mutex
var autoPartsCategoryAfterDeleteHooks []AutoPartsCategoryHook

var autoPartsCategoryBeforeUpsertMu sync.Mutex
var autoPartsCategoryBeforeUpsertHooks []AutoPartsCategoryHook
var autoPartsCategoryAfterUpsertMu sync.Mutex
var autoPartsCategoryAfterUpsertHooks []AutoPartsCategoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AutoPartsCategory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoPartsCategoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AutoPartsCategory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoPartsCategoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AutoPartsCategory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoPartsCategoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AutoPartsCategory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoPartsCategoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AutoPartsCategory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoPartsCategoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AutoPartsCategory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoPartsCategoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AutoPartsCategory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoPartsCategoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AutoPartsCategory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoPartsCategoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AutoPartsCategory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoPartsCategoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAutoPartsCategoryHook registers your hook function for all future operations.
func AddAutoPartsCategoryHook(hookPoint boil.HookPoint, autoPartsCategoryHook AutoPartsCategoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		autoPartsCategoryAfterSelectMu.Lock()
		autoPartsCategoryAfterSelectHooks = append(autoPartsCategoryAfterSelectHooks, autoPartsCategoryHook)
		autoPartsCategoryAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		autoPartsCategoryBeforeInsertMu.Lock()
		autoPartsCategoryBeforeInsertHooks = append(autoPartsCategoryBeforeInsertHooks, autoPartsCategoryHook)
		autoPartsCategoryBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		autoPartsCategoryAfterInsertMu.Lock()
		autoPartsCategoryAfterInsertHooks = append(autoPartsCategoryAfterInsertHooks, autoPartsCategoryHook)
		autoPartsCategoryAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		autoPartsCategoryBeforeUpdateMu.Lock()
		autoPartsCategoryBeforeUpdateHooks = append(autoPartsCategoryBeforeUpdateHooks, autoPartsCategoryHook)
		autoPartsCategoryBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		autoPartsCategoryAfterUpdateMu.Lock()
		autoPartsCategoryAfterUpdateHooks = append(autoPartsCategoryAfterUpdateHooks, autoPartsCategoryHook)
		autoPartsCategoryAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		autoPartsCategoryBeforeDeleteMu.Lock()
		autoPartsCategoryBeforeDeleteHooks = append(autoPartsCategoryBeforeDeleteHooks, autoPartsCategoryHook)
		autoPartsCategoryBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		autoPartsCategoryAfterDeleteMu.Lock()
		autoPartsCategoryAfterDeleteHooks = append(autoPartsCategoryAfterDeleteHooks, autoPartsCategoryHook)
		autoPartsCategoryAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		autoPartsCategoryBeforeUpsertMu.Lock()
		autoPartsCategoryBeforeUpsertHooks = append(autoPartsCategoryBeforeUpsertHooks, autoPartsCategoryHook)
		autoPartsCategoryBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		autoPartsCategoryAfterUpsertMu.Lock()
		autoPartsCategoryAfterUpsertHooks = append(autoPartsCategoryAfterUpsertHooks, autoPartsCategoryHook)
		autoPartsCategoryAfterUpsertMu.Unlock()
	}
}

// One returns a single autoPartsCategory record from the query.
func (q autoPartsCategoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AutoPartsCategory, error) {
	o := &AutoPartsCategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for auto_parts_categories")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AutoPartsCategory records from the query.
func (q autoPartsCategoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (AutoPartsCategorySlice, error) {
	var o []*AutoPartsCategory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AutoPartsCategory slice")
	}

	if len(autoPartsCategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AutoPartsCategory records in the query.
func (q autoPartsCategoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count auto_parts_categories rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q autoPartsCategoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if auto_parts_categories exists")
	}

	return count > 0, nil
}

// CategoryAutoStores retrieves all the auto_store's AutoStores with an executor via category_id column.
func (o *AutoPartsCategory) CategoryAutoStores(mods ...qm.QueryMod) autoStoreQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"auto_stores\".\"category_id\"=?", o.CategoryID),
	)

	return AutoStores(queryMods...)
}

// CategoryBiddings retrieves all the bidding's Biddings with an executor via category_id column.
func (o *AutoPartsCategory) CategoryBiddings(mods ...qm.QueryMod) biddingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"biddings\".\"category_id\"=?", o.CategoryID),
	)

	return Biddings(queryMods...)
}

// LoadCategoryAutoStores allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (autoPartsCategoryL) LoadCategoryAutoStores(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAutoPartsCategory interface{}, mods queries.Applicator) error {
	var slice []*AutoPartsCategory
	var object *AutoPartsCategory

	if singular {
		var ok bool
		object, ok = maybeAutoPartsCategory.(*AutoPartsCategory)
		if !ok {
			object = new(AutoPartsCategory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAutoPartsCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAutoPartsCategory))
			}
		}
	} else {
		s, ok := maybeAutoPartsCategory.(*[]*AutoPartsCategory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAutoPartsCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAutoPartsCategory))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &autoPartsCategoryR{}
		}
		args[object.CategoryID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &autoPartsCategoryR{}
			}
			args[obj.CategoryID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`auto_stores`),
		qm.WhereIn(`auto_stores.category_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load auto_stores")
	}

	var resultSlice []*AutoStore
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice auto_stores")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on auto_stores")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auto_stores")
	}

	if len(autoStoreAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CategoryAutoStores = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &autoStoreR{}
			}
			foreign.R.Category = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.CategoryID, foreign.CategoryID) {
				local.R.CategoryAutoStores = append(local.R.CategoryAutoStores, foreign)
				if foreign.R == nil {
					foreign.R = &autoStoreR{}
				}
				foreign.R.Category = local
				break
			}
		}
	}

	return nil
}

// LoadCategoryBiddings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (autoPartsCategoryL) LoadCategoryBiddings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAutoPartsCategory interface{}, mods queries.Applicator) error {
	var slice []*AutoPartsCategory
	var object *AutoPartsCategory

	if singular {
		var ok bool
		object, ok = maybeAutoPartsCategory.(*AutoPartsCategory)
		if !ok {
			object = new(AutoPartsCategory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAutoPartsCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAutoPartsCategory))
			}
		}
	} else {
		s, ok := maybeAutoPartsCategory.(*[]*AutoPartsCategory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAutoPartsCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAutoPartsCategory))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &autoPartsCategoryR{}
		}
		args[object.CategoryID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &autoPartsCategoryR{}
			}
			args[obj.CategoryID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`biddings`),
		qm.WhereIn(`biddings.category_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load biddings")
	}

	var resultSlice []*Bidding
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice biddings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on biddings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for biddings")
	}

	if len(biddingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CategoryBiddings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &biddingR{}
			}
			foreign.R.Category = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.CategoryID, foreign.CategoryID) {
				local.R.CategoryBiddings = append(local.R.CategoryBiddings, foreign)
				if foreign.R == nil {
					foreign.R = &biddingR{}
				}
				foreign.R.Category = local
				break
			}
		}
	}

	return nil
}

// AddCategoryAutoStores adds the given related objects to the existing relationships
// of the auto_parts_category, optionally inserting them as new records.
// Appends related to o.R.CategoryAutoStores.
// Sets related.R.Category appropriately.
func (o *AutoPartsCategory) AddCategoryAutoStores(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AutoStore) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CategoryID, o.CategoryID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"auto_stores\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"category_id"}),
				strmangle.WhereClause("\"", "\"", 0, autoStorePrimaryKeyColumns),
			)
			values := []interface{}{o.CategoryID, rel.StoreID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CategoryID, o.CategoryID)
		}
	}

	if o.R == nil {
		o.R = &autoPartsCategoryR{
			CategoryAutoStores: related,
		}
	} else {
		o.R.CategoryAutoStores = append(o.R.CategoryAutoStores, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &autoStoreR{
				Category: o,
			}
		} else {
			rel.R.Category = o
		}
	}
	return nil
}

// AddCategoryBiddings adds the given related objects to the existing relationships
// of the auto_parts_category, optionally inserting them as new records.
// Appends related to o.R.CategoryBiddings.
// Sets related.R.Category appropriately.
func (o *AutoPartsCategory) AddCategoryBiddings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Bidding) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CategoryID, o.CategoryID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"biddings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"category_id"}),
				strmangle.WhereClause("\"", "\"", 0, biddingPrimaryKeyColumns),
			)
			values := []interface{}{o.CategoryID, rel.BiddingID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CategoryID, o.CategoryID)
		}
	}

	if o.R == nil {
		o.R = &autoPartsCategoryR{
			CategoryBiddings: related,
		}
	} else {
		o.R.CategoryBiddings = append(o.R.CategoryBiddings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &biddingR{
				Category: o,
			}
		} else {
			rel.R.Category = o
		}
	}
	return nil
}

// AutoPartsCategories retrieves all the records using an executor.
func AutoPartsCategories(mods ...qm.QueryMod) autoPartsCategoryQuery {
	mods = append(mods, qm.From("\"auto_parts_categories\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"auto_parts_categories\".*"})
	}

	return autoPartsCategoryQuery{q}
}

// FindAutoPartsCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAutoPartsCategory(ctx context.Context, exec boil.ContextExecutor, categoryID null.Int64, selectCols ...string) (*AutoPartsCategory, error) {
	autoPartsCategoryObj := &AutoPartsCategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"auto_parts_categories\" where \"category_id\"=?", sel,
	)

	q := queries.Raw(query, categoryID)

	err := q.Bind(ctx, exec, autoPartsCategoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from auto_parts_categories")
	}

	if err = autoPartsCategoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return autoPartsCategoryObj, err
	}

	return autoPartsCategoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AutoPartsCategory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no auto_parts_categories provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(autoPartsCategoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	autoPartsCategoryInsertCacheMut.RLock()
	cache, cached := autoPartsCategoryInsertCache[key]
	autoPartsCategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			autoPartsCategoryAllColumns,
			autoPartsCategoryColumnsWithDefault,
			autoPartsCategoryColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, autoPartsCategoryGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(autoPartsCategoryType, autoPartsCategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(autoPartsCategoryType, autoPartsCategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"auto_parts_categories\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"auto_parts_categories\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into auto_parts_categories")
	}

	if !cached {
		autoPartsCategoryInsertCacheMut.Lock()
		autoPartsCategoryInsertCache[key] = cache
		autoPartsCategoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AutoPartsCategory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AutoPartsCategory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	autoPartsCategoryUpdateCacheMut.RLock()
	cache, cached := autoPartsCategoryUpdateCache[key]
	autoPartsCategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			autoPartsCategoryAllColumns,
			autoPartsCategoryPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, autoPartsCategoryGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update auto_parts_categories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"auto_parts_categories\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, autoPartsCategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(autoPartsCategoryType, autoPartsCategoryMapping, append(wl, autoPartsCategoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update auto_parts_categories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for auto_parts_categories")
	}

	if !cached {
		autoPartsCategoryUpdateCacheMut.Lock()
		autoPartsCategoryUpdateCache[key] = cache
		autoPartsCategoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q autoPartsCategoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for auto_parts_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for auto_parts_categories")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AutoPartsCategorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autoPartsCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"auto_parts_categories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, autoPartsCategoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in autoPartsCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all autoPartsCategory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AutoPartsCategory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no auto_parts_categories provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(autoPartsCategoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	autoPartsCategoryUpsertCacheMut.RLock()
	cache, cached := autoPartsCategoryUpsertCache[key]
	autoPartsCategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			autoPartsCategoryAllColumns,
			autoPartsCategoryColumnsWithDefault,
			autoPartsCategoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			autoPartsCategoryAllColumns,
			autoPartsCategoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert auto_parts_categories, could not build update column list")
		}

		ret := strmangle.SetComplement(autoPartsCategoryAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(autoPartsCategoryPrimaryKeyColumns))
			copy(conflict, autoPartsCategoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"auto_parts_categories\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(autoPartsCategoryType, autoPartsCategoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(autoPartsCategoryType, autoPartsCategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert auto_parts_categories")
	}

	if !cached {
		autoPartsCategoryUpsertCacheMut.Lock()
		autoPartsCategoryUpsertCache[key] = cache
		autoPartsCategoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AutoPartsCategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AutoPartsCategory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AutoPartsCategory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), autoPartsCategoryPrimaryKeyMapping)
	sql := "DELETE FROM \"auto_parts_categories\" WHERE \"category_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from auto_parts_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for auto_parts_categories")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q autoPartsCategoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no autoPartsCategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from auto_parts_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auto_parts_categories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AutoPartsCategorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(autoPartsCategoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autoPartsCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"auto_parts_categories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, autoPartsCategoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from autoPartsCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auto_parts_categories")
	}

	if len(autoPartsCategoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AutoPartsCategory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAutoPartsCategory(ctx, exec, o.CategoryID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AutoPartsCategorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AutoPartsCategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autoPartsCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"auto_parts_categories\".* FROM \"auto_parts_categories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, autoPartsCategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AutoPartsCategorySlice")
	}

	*o = slice

	return nil
}

// AutoPartsCategoryExists checks if the AutoPartsCategory row exists.
func AutoPartsCategoryExists(ctx context.Context, exec boil.ContextExecutor, categoryID null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"auto_parts_categories\" where \"category_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, categoryID)
	}
	row := exec.QueryRowContext(ctx, sql, categoryID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if auto_parts_categories exists")
	}

	return exists, nil
}

// Exists checks if the AutoPartsCategory row exists.
func (o *AutoPartsCategory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AutoPartsCategoryExists(ctx, exec, o.CategoryID)
}
