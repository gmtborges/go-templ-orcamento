// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Employer is an object representing the database table.
type Employer struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Type      string    `boil:"type" json:"type" toml:"type" yaml:"type"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *employerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L employerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EmployerColumns = struct {
	ID        string
	Type      string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Type:      "type",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var EmployerTableColumns = struct {
	ID        string
	Type      string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "employers.id",
	Type:      "employers.type",
	CreatedAt: "employers.created_at",
	UpdatedAt: "employers.updated_at",
}

// Generated where

var EmployerWhere = struct {
	ID        whereHelperint
	Type      whereHelperstring
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
}{
	ID:        whereHelperint{field: "\"employers\".\"id\""},
	Type:      whereHelperstring{field: "\"employers\".\"type\""},
	CreatedAt: whereHelpernull_Time{field: "\"employers\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"employers\".\"updated_at\""},
}

// EmployerRels is where relationship names are stored.
var EmployerRels = struct {
	AutoStores string
	Companies  string
	Users      string
}{
	AutoStores: "AutoStores",
	Companies:  "Companies",
	Users:      "Users",
}

// employerR is where relationships are stored.
type employerR struct {
	AutoStores AutoStoreSlice `boil:"AutoStores" json:"AutoStores" toml:"AutoStores" yaml:"AutoStores"`
	Companies  CompanySlice   `boil:"Companies" json:"Companies" toml:"Companies" yaml:"Companies"`
	Users      UserSlice      `boil:"Users" json:"Users" toml:"Users" yaml:"Users"`
}

// NewStruct creates a new relationship struct
func (*employerR) NewStruct() *employerR {
	return &employerR{}
}

func (r *employerR) GetAutoStores() AutoStoreSlice {
	if r == nil {
		return nil
	}
	return r.AutoStores
}

func (r *employerR) GetCompanies() CompanySlice {
	if r == nil {
		return nil
	}
	return r.Companies
}

func (r *employerR) GetUsers() UserSlice {
	if r == nil {
		return nil
	}
	return r.Users
}

// employerL is where Load methods for each relationship are stored.
type employerL struct{}

var (
	employerAllColumns            = []string{"id", "type", "created_at", "updated_at"}
	employerColumnsWithoutDefault = []string{"type"}
	employerColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	employerPrimaryKeyColumns     = []string{"id"}
	employerGeneratedColumns      = []string{}
)

type (
	// EmployerSlice is an alias for a slice of pointers to Employer.
	// This should almost always be used instead of []Employer.
	EmployerSlice []*Employer
	// EmployerHook is the signature for custom Employer hook methods
	EmployerHook func(context.Context, boil.ContextExecutor, *Employer) error

	employerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	employerType                 = reflect.TypeOf(&Employer{})
	employerMapping              = queries.MakeStructMapping(employerType)
	employerPrimaryKeyMapping, _ = queries.BindMapping(employerType, employerMapping, employerPrimaryKeyColumns)
	employerInsertCacheMut       sync.RWMutex
	employerInsertCache          = make(map[string]insertCache)
	employerUpdateCacheMut       sync.RWMutex
	employerUpdateCache          = make(map[string]updateCache)
	employerUpsertCacheMut       sync.RWMutex
	employerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var employerAfterSelectMu sync.Mutex
var employerAfterSelectHooks []EmployerHook

var employerBeforeInsertMu sync.Mutex
var employerBeforeInsertHooks []EmployerHook
var employerAfterInsertMu sync.Mutex
var employerAfterInsertHooks []EmployerHook

var employerBeforeUpdateMu sync.Mutex
var employerBeforeUpdateHooks []EmployerHook
var employerAfterUpdateMu sync.Mutex
var employerAfterUpdateHooks []EmployerHook

var employerBeforeDeleteMu sync.Mutex
var employerBeforeDeleteHooks []EmployerHook
var employerAfterDeleteMu sync.Mutex
var employerAfterDeleteHooks []EmployerHook

var employerBeforeUpsertMu sync.Mutex
var employerBeforeUpsertHooks []EmployerHook
var employerAfterUpsertMu sync.Mutex
var employerAfterUpsertHooks []EmployerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Employer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Employer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Employer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Employer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Employer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Employer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Employer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Employer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Employer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEmployerHook registers your hook function for all future operations.
func AddEmployerHook(hookPoint boil.HookPoint, employerHook EmployerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		employerAfterSelectMu.Lock()
		employerAfterSelectHooks = append(employerAfterSelectHooks, employerHook)
		employerAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		employerBeforeInsertMu.Lock()
		employerBeforeInsertHooks = append(employerBeforeInsertHooks, employerHook)
		employerBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		employerAfterInsertMu.Lock()
		employerAfterInsertHooks = append(employerAfterInsertHooks, employerHook)
		employerAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		employerBeforeUpdateMu.Lock()
		employerBeforeUpdateHooks = append(employerBeforeUpdateHooks, employerHook)
		employerBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		employerAfterUpdateMu.Lock()
		employerAfterUpdateHooks = append(employerAfterUpdateHooks, employerHook)
		employerAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		employerBeforeDeleteMu.Lock()
		employerBeforeDeleteHooks = append(employerBeforeDeleteHooks, employerHook)
		employerBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		employerAfterDeleteMu.Lock()
		employerAfterDeleteHooks = append(employerAfterDeleteHooks, employerHook)
		employerAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		employerBeforeUpsertMu.Lock()
		employerBeforeUpsertHooks = append(employerBeforeUpsertHooks, employerHook)
		employerBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		employerAfterUpsertMu.Lock()
		employerAfterUpsertHooks = append(employerAfterUpsertHooks, employerHook)
		employerAfterUpsertMu.Unlock()
	}
}

// One returns a single employer record from the query.
func (q employerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Employer, error) {
	o := &Employer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for employers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Employer records from the query.
func (q employerQuery) All(ctx context.Context, exec boil.ContextExecutor) (EmployerSlice, error) {
	var o []*Employer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Employer slice")
	}

	if len(employerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Employer records in the query.
func (q employerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count employers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q employerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if employers exists")
	}

	return count > 0, nil
}

// AutoStores retrieves all the auto_store's AutoStores with an executor.
func (o *Employer) AutoStores(mods ...qm.QueryMod) autoStoreQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"auto_stores\".\"employer_id\"=?", o.ID),
	)

	return AutoStores(queryMods...)
}

// Companies retrieves all the company's Companies with an executor.
func (o *Employer) Companies(mods ...qm.QueryMod) companyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"companies\".\"employer_id\"=?", o.ID),
	)

	return Companies(queryMods...)
}

// Users retrieves all the user's Users with an executor.
func (o *Employer) Users(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"users\".\"employer_id\"=?", o.ID),
	)

	return Users(queryMods...)
}

// LoadAutoStores allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (employerL) LoadAutoStores(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEmployer interface{}, mods queries.Applicator) error {
	var slice []*Employer
	var object *Employer

	if singular {
		var ok bool
		object, ok = maybeEmployer.(*Employer)
		if !ok {
			object = new(Employer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEmployer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEmployer))
			}
		}
	} else {
		s, ok := maybeEmployer.(*[]*Employer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEmployer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEmployer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &employerR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &employerR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`auto_stores`),
		qm.WhereIn(`auto_stores.employer_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load auto_stores")
	}

	var resultSlice []*AutoStore
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice auto_stores")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on auto_stores")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auto_stores")
	}

	if len(autoStoreAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AutoStores = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &autoStoreR{}
			}
			foreign.R.Employer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.EmployerID {
				local.R.AutoStores = append(local.R.AutoStores, foreign)
				if foreign.R == nil {
					foreign.R = &autoStoreR{}
				}
				foreign.R.Employer = local
				break
			}
		}
	}

	return nil
}

// LoadCompanies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (employerL) LoadCompanies(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEmployer interface{}, mods queries.Applicator) error {
	var slice []*Employer
	var object *Employer

	if singular {
		var ok bool
		object, ok = maybeEmployer.(*Employer)
		if !ok {
			object = new(Employer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEmployer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEmployer))
			}
		}
	} else {
		s, ok := maybeEmployer.(*[]*Employer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEmployer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEmployer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &employerR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &employerR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`companies`),
		qm.WhereIn(`companies.employer_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load companies")
	}

	var resultSlice []*Company
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice companies")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on companies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for companies")
	}

	if len(companyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Companies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &companyR{}
			}
			foreign.R.Employer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.EmployerID {
				local.R.Companies = append(local.R.Companies, foreign)
				if foreign.R == nil {
					foreign.R = &companyR{}
				}
				foreign.R.Employer = local
				break
			}
		}
	}

	return nil
}

// LoadUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (employerL) LoadUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEmployer interface{}, mods queries.Applicator) error {
	var slice []*Employer
	var object *Employer

	if singular {
		var ok bool
		object, ok = maybeEmployer.(*Employer)
		if !ok {
			object = new(Employer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEmployer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEmployer))
			}
		}
	} else {
		s, ok := maybeEmployer.(*[]*Employer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEmployer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEmployer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &employerR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &employerR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.employer_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Users = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.Employer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.EmployerID {
				local.R.Users = append(local.R.Users, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Employer = local
				break
			}
		}
	}

	return nil
}

// AddAutoStores adds the given related objects to the existing relationships
// of the employer, optionally inserting them as new records.
// Appends related to o.R.AutoStores.
// Sets related.R.Employer appropriately.
func (o *Employer) AddAutoStores(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AutoStore) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EmployerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"auto_stores\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"employer_id"}),
				strmangle.WhereClause("\"", "\"", 2, autoStorePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EmployerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &employerR{
			AutoStores: related,
		}
	} else {
		o.R.AutoStores = append(o.R.AutoStores, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &autoStoreR{
				Employer: o,
			}
		} else {
			rel.R.Employer = o
		}
	}
	return nil
}

// AddCompanies adds the given related objects to the existing relationships
// of the employer, optionally inserting them as new records.
// Appends related to o.R.Companies.
// Sets related.R.Employer appropriately.
func (o *Employer) AddCompanies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Company) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EmployerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"companies\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"employer_id"}),
				strmangle.WhereClause("\"", "\"", 2, companyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EmployerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &employerR{
			Companies: related,
		}
	} else {
		o.R.Companies = append(o.R.Companies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &companyR{
				Employer: o,
			}
		} else {
			rel.R.Employer = o
		}
	}
	return nil
}

// AddUsers adds the given related objects to the existing relationships
// of the employer, optionally inserting them as new records.
// Appends related to o.R.Users.
// Sets related.R.Employer appropriately.
func (o *Employer) AddUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EmployerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"employer_id"}),
				strmangle.WhereClause("\"", "\"", 2, userPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EmployerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &employerR{
			Users: related,
		}
	} else {
		o.R.Users = append(o.R.Users, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				Employer: o,
			}
		} else {
			rel.R.Employer = o
		}
	}
	return nil
}

// Employers retrieves all the records using an executor.
func Employers(mods ...qm.QueryMod) employerQuery {
	mods = append(mods, qm.From("\"employers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"employers\".*"})
	}

	return employerQuery{q}
}

// FindEmployer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEmployer(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Employer, error) {
	employerObj := &Employer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"employers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, employerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from employers")
	}

	if err = employerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return employerObj, err
	}

	return employerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Employer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no employers provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(employerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	employerInsertCacheMut.RLock()
	cache, cached := employerInsertCache[key]
	employerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			employerAllColumns,
			employerColumnsWithDefault,
			employerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(employerType, employerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(employerType, employerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"employers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"employers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into employers")
	}

	if !cached {
		employerInsertCacheMut.Lock()
		employerInsertCache[key] = cache
		employerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Employer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Employer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	employerUpdateCacheMut.RLock()
	cache, cached := employerUpdateCache[key]
	employerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			employerAllColumns,
			employerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update employers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"employers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, employerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(employerType, employerMapping, append(wl, employerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update employers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for employers")
	}

	if !cached {
		employerUpdateCacheMut.Lock()
		employerUpdateCache[key] = cache
		employerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q employerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for employers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for employers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EmployerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), employerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"employers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, employerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in employer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all employer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Employer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no employers provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(employerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	employerUpsertCacheMut.RLock()
	cache, cached := employerUpsertCache[key]
	employerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			employerAllColumns,
			employerColumnsWithDefault,
			employerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			employerAllColumns,
			employerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert employers, could not build update column list")
		}

		ret := strmangle.SetComplement(employerAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(employerPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert employers, could not build conflict column list")
			}

			conflict = make([]string, len(employerPrimaryKeyColumns))
			copy(conflict, employerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"employers\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(employerType, employerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(employerType, employerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert employers")
	}

	if !cached {
		employerUpsertCacheMut.Lock()
		employerUpsertCache[key] = cache
		employerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Employer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Employer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Employer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), employerPrimaryKeyMapping)
	sql := "DELETE FROM \"employers\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from employers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for employers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q employerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no employerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from employers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for employers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EmployerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(employerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), employerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"employers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, employerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from employer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for employers")
	}

	if len(employerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Employer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEmployer(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EmployerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EmployerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), employerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"employers\".* FROM \"employers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, employerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EmployerSlice")
	}

	*o = slice

	return nil
}

// EmployerExists checks if the Employer row exists.
func EmployerExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"employers\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if employers exists")
	}

	return exists, nil
}

// Exists checks if the Employer row exists.
func (o *Employer) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return EmployerExists(ctx, exec, o.ID)
}
