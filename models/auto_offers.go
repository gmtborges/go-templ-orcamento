// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AutoOffer is an object representing the database table.
type AutoOffer struct {
	OfferID      null.Int64  `boil:"offer_id" json:"offer_id,omitempty" toml:"offer_id" yaml:"offer_id,omitempty"`
	BiddingID    int64       `boil:"bidding_id" json:"bidding_id" toml:"bidding_id" yaml:"bidding_id"`
	StoreID      int64       `boil:"store_id" json:"store_id" toml:"store_id" yaml:"store_id"`
	OfferDetails null.String `boil:"offer_details" json:"offer_details,omitempty" toml:"offer_details" yaml:"offer_details,omitempty"`
	OfferDate    null.Time   `boil:"offer_date" json:"offer_date,omitempty" toml:"offer_date" yaml:"offer_date,omitempty"`
	CreatedAt    null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *autoOfferR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L autoOfferL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AutoOfferColumns = struct {
	OfferID      string
	BiddingID    string
	StoreID      string
	OfferDetails string
	OfferDate    string
	CreatedAt    string
	UpdatedAt    string
}{
	OfferID:      "offer_id",
	BiddingID:    "bidding_id",
	StoreID:      "store_id",
	OfferDetails: "offer_details",
	OfferDate:    "offer_date",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
}

var AutoOfferTableColumns = struct {
	OfferID      string
	BiddingID    string
	StoreID      string
	OfferDetails string
	OfferDate    string
	CreatedAt    string
	UpdatedAt    string
}{
	OfferID:      "auto_offers.offer_id",
	BiddingID:    "auto_offers.bidding_id",
	StoreID:      "auto_offers.store_id",
	OfferDetails: "auto_offers.offer_details",
	OfferDate:    "auto_offers.offer_date",
	CreatedAt:    "auto_offers.created_at",
	UpdatedAt:    "auto_offers.updated_at",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AutoOfferWhere = struct {
	OfferID      whereHelpernull_Int64
	BiddingID    whereHelperint64
	StoreID      whereHelperint64
	OfferDetails whereHelpernull_String
	OfferDate    whereHelpernull_Time
	CreatedAt    whereHelpernull_Time
	UpdatedAt    whereHelpernull_Time
}{
	OfferID:      whereHelpernull_Int64{field: "\"auto_offers\".\"offer_id\""},
	BiddingID:    whereHelperint64{field: "\"auto_offers\".\"bidding_id\""},
	StoreID:      whereHelperint64{field: "\"auto_offers\".\"store_id\""},
	OfferDetails: whereHelpernull_String{field: "\"auto_offers\".\"offer_details\""},
	OfferDate:    whereHelpernull_Time{field: "\"auto_offers\".\"offer_date\""},
	CreatedAt:    whereHelpernull_Time{field: "\"auto_offers\".\"created_at\""},
	UpdatedAt:    whereHelpernull_Time{field: "\"auto_offers\".\"updated_at\""},
}

// AutoOfferRels is where relationship names are stored.
var AutoOfferRels = struct {
	Store   string
	Bidding string
}{
	Store:   "Store",
	Bidding: "Bidding",
}

// autoOfferR is where relationships are stored.
type autoOfferR struct {
	Store   *AutoStore `boil:"Store" json:"Store" toml:"Store" yaml:"Store"`
	Bidding *Bidding   `boil:"Bidding" json:"Bidding" toml:"Bidding" yaml:"Bidding"`
}

// NewStruct creates a new relationship struct
func (*autoOfferR) NewStruct() *autoOfferR {
	return &autoOfferR{}
}

func (r *autoOfferR) GetStore() *AutoStore {
	if r == nil {
		return nil
	}
	return r.Store
}

func (r *autoOfferR) GetBidding() *Bidding {
	if r == nil {
		return nil
	}
	return r.Bidding
}

// autoOfferL is where Load methods for each relationship are stored.
type autoOfferL struct{}

var (
	autoOfferAllColumns            = []string{"offer_id", "bidding_id", "store_id", "offer_details", "offer_date", "created_at", "updated_at"}
	autoOfferColumnsWithoutDefault = []string{"bidding_id", "store_id"}
	autoOfferColumnsWithDefault    = []string{"offer_id", "offer_details", "offer_date", "created_at", "updated_at"}
	autoOfferPrimaryKeyColumns     = []string{"offer_id"}
	autoOfferGeneratedColumns      = []string{"offer_id"}
)

type (
	// AutoOfferSlice is an alias for a slice of pointers to AutoOffer.
	// This should almost always be used instead of []AutoOffer.
	AutoOfferSlice []*AutoOffer
	// AutoOfferHook is the signature for custom AutoOffer hook methods
	AutoOfferHook func(context.Context, boil.ContextExecutor, *AutoOffer) error

	autoOfferQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	autoOfferType                 = reflect.TypeOf(&AutoOffer{})
	autoOfferMapping              = queries.MakeStructMapping(autoOfferType)
	autoOfferPrimaryKeyMapping, _ = queries.BindMapping(autoOfferType, autoOfferMapping, autoOfferPrimaryKeyColumns)
	autoOfferInsertCacheMut       sync.RWMutex
	autoOfferInsertCache          = make(map[string]insertCache)
	autoOfferUpdateCacheMut       sync.RWMutex
	autoOfferUpdateCache          = make(map[string]updateCache)
	autoOfferUpsertCacheMut       sync.RWMutex
	autoOfferUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var autoOfferAfterSelectMu sync.Mutex
var autoOfferAfterSelectHooks []AutoOfferHook

var autoOfferBeforeInsertMu sync.Mutex
var autoOfferBeforeInsertHooks []AutoOfferHook
var autoOfferAfterInsertMu sync.Mutex
var autoOfferAfterInsertHooks []AutoOfferHook

var autoOfferBeforeUpdateMu sync.Mutex
var autoOfferBeforeUpdateHooks []AutoOfferHook
var autoOfferAfterUpdateMu sync.Mutex
var autoOfferAfterUpdateHooks []AutoOfferHook

var autoOfferBeforeDeleteMu sync.Mutex
var autoOfferBeforeDeleteHooks []AutoOfferHook
var autoOfferAfterDeleteMu sync.Mutex
var autoOfferAfterDeleteHooks []AutoOfferHook

var autoOfferBeforeUpsertMu sync.Mutex
var autoOfferBeforeUpsertHooks []AutoOfferHook
var autoOfferAfterUpsertMu sync.Mutex
var autoOfferAfterUpsertHooks []AutoOfferHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AutoOffer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoOfferAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AutoOffer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoOfferBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AutoOffer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoOfferAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AutoOffer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoOfferBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AutoOffer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoOfferAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AutoOffer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoOfferBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AutoOffer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoOfferAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AutoOffer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoOfferBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AutoOffer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoOfferAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAutoOfferHook registers your hook function for all future operations.
func AddAutoOfferHook(hookPoint boil.HookPoint, autoOfferHook AutoOfferHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		autoOfferAfterSelectMu.Lock()
		autoOfferAfterSelectHooks = append(autoOfferAfterSelectHooks, autoOfferHook)
		autoOfferAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		autoOfferBeforeInsertMu.Lock()
		autoOfferBeforeInsertHooks = append(autoOfferBeforeInsertHooks, autoOfferHook)
		autoOfferBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		autoOfferAfterInsertMu.Lock()
		autoOfferAfterInsertHooks = append(autoOfferAfterInsertHooks, autoOfferHook)
		autoOfferAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		autoOfferBeforeUpdateMu.Lock()
		autoOfferBeforeUpdateHooks = append(autoOfferBeforeUpdateHooks, autoOfferHook)
		autoOfferBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		autoOfferAfterUpdateMu.Lock()
		autoOfferAfterUpdateHooks = append(autoOfferAfterUpdateHooks, autoOfferHook)
		autoOfferAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		autoOfferBeforeDeleteMu.Lock()
		autoOfferBeforeDeleteHooks = append(autoOfferBeforeDeleteHooks, autoOfferHook)
		autoOfferBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		autoOfferAfterDeleteMu.Lock()
		autoOfferAfterDeleteHooks = append(autoOfferAfterDeleteHooks, autoOfferHook)
		autoOfferAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		autoOfferBeforeUpsertMu.Lock()
		autoOfferBeforeUpsertHooks = append(autoOfferBeforeUpsertHooks, autoOfferHook)
		autoOfferBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		autoOfferAfterUpsertMu.Lock()
		autoOfferAfterUpsertHooks = append(autoOfferAfterUpsertHooks, autoOfferHook)
		autoOfferAfterUpsertMu.Unlock()
	}
}

// One returns a single autoOffer record from the query.
func (q autoOfferQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AutoOffer, error) {
	o := &AutoOffer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for auto_offers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AutoOffer records from the query.
func (q autoOfferQuery) All(ctx context.Context, exec boil.ContextExecutor) (AutoOfferSlice, error) {
	var o []*AutoOffer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AutoOffer slice")
	}

	if len(autoOfferAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AutoOffer records in the query.
func (q autoOfferQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count auto_offers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q autoOfferQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if auto_offers exists")
	}

	return count > 0, nil
}

// Store pointed to by the foreign key.
func (o *AutoOffer) Store(mods ...qm.QueryMod) autoStoreQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"store_id\" = ?", o.StoreID),
	}

	queryMods = append(queryMods, mods...)

	return AutoStores(queryMods...)
}

// Bidding pointed to by the foreign key.
func (o *AutoOffer) Bidding(mods ...qm.QueryMod) biddingQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"bidding_id\" = ?", o.BiddingID),
	}

	queryMods = append(queryMods, mods...)

	return Biddings(queryMods...)
}

// LoadStore allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (autoOfferL) LoadStore(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAutoOffer interface{}, mods queries.Applicator) error {
	var slice []*AutoOffer
	var object *AutoOffer

	if singular {
		var ok bool
		object, ok = maybeAutoOffer.(*AutoOffer)
		if !ok {
			object = new(AutoOffer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAutoOffer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAutoOffer))
			}
		}
	} else {
		s, ok := maybeAutoOffer.(*[]*AutoOffer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAutoOffer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAutoOffer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &autoOfferR{}
		}
		if !queries.IsNil(object.StoreID) {
			args[object.StoreID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &autoOfferR{}
			}

			if !queries.IsNil(obj.StoreID) {
				args[obj.StoreID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`auto_stores`),
		qm.WhereIn(`auto_stores.store_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AutoStore")
	}

	var resultSlice []*AutoStore
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AutoStore")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for auto_stores")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auto_stores")
	}

	if len(autoStoreAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Store = foreign
		if foreign.R == nil {
			foreign.R = &autoStoreR{}
		}
		foreign.R.StoreAutoOffers = append(foreign.R.StoreAutoOffers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.StoreID, foreign.StoreID) {
				local.R.Store = foreign
				if foreign.R == nil {
					foreign.R = &autoStoreR{}
				}
				foreign.R.StoreAutoOffers = append(foreign.R.StoreAutoOffers, local)
				break
			}
		}
	}

	return nil
}

// LoadBidding allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (autoOfferL) LoadBidding(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAutoOffer interface{}, mods queries.Applicator) error {
	var slice []*AutoOffer
	var object *AutoOffer

	if singular {
		var ok bool
		object, ok = maybeAutoOffer.(*AutoOffer)
		if !ok {
			object = new(AutoOffer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAutoOffer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAutoOffer))
			}
		}
	} else {
		s, ok := maybeAutoOffer.(*[]*AutoOffer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAutoOffer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAutoOffer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &autoOfferR{}
		}
		if !queries.IsNil(object.BiddingID) {
			args[object.BiddingID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &autoOfferR{}
			}

			if !queries.IsNil(obj.BiddingID) {
				args[obj.BiddingID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`biddings`),
		qm.WhereIn(`biddings.bidding_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Bidding")
	}

	var resultSlice []*Bidding
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Bidding")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for biddings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for biddings")
	}

	if len(biddingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Bidding = foreign
		if foreign.R == nil {
			foreign.R = &biddingR{}
		}
		foreign.R.AutoOffers = append(foreign.R.AutoOffers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BiddingID, foreign.BiddingID) {
				local.R.Bidding = foreign
				if foreign.R == nil {
					foreign.R = &biddingR{}
				}
				foreign.R.AutoOffers = append(foreign.R.AutoOffers, local)
				break
			}
		}
	}

	return nil
}

// SetStore of the autoOffer to the related item.
// Sets o.R.Store to related.
// Adds o to related.R.StoreAutoOffers.
func (o *AutoOffer) SetStore(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AutoStore) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"auto_offers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"store_id"}),
		strmangle.WhereClause("\"", "\"", 0, autoOfferPrimaryKeyColumns),
	)
	values := []interface{}{related.StoreID, o.OfferID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.StoreID, related.StoreID)
	if o.R == nil {
		o.R = &autoOfferR{
			Store: related,
		}
	} else {
		o.R.Store = related
	}

	if related.R == nil {
		related.R = &autoStoreR{
			StoreAutoOffers: AutoOfferSlice{o},
		}
	} else {
		related.R.StoreAutoOffers = append(related.R.StoreAutoOffers, o)
	}

	return nil
}

// SetBidding of the autoOffer to the related item.
// Sets o.R.Bidding to related.
// Adds o to related.R.AutoOffers.
func (o *AutoOffer) SetBidding(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Bidding) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"auto_offers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"bidding_id"}),
		strmangle.WhereClause("\"", "\"", 0, autoOfferPrimaryKeyColumns),
	)
	values := []interface{}{related.BiddingID, o.OfferID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BiddingID, related.BiddingID)
	if o.R == nil {
		o.R = &autoOfferR{
			Bidding: related,
		}
	} else {
		o.R.Bidding = related
	}

	if related.R == nil {
		related.R = &biddingR{
			AutoOffers: AutoOfferSlice{o},
		}
	} else {
		related.R.AutoOffers = append(related.R.AutoOffers, o)
	}

	return nil
}

// AutoOffers retrieves all the records using an executor.
func AutoOffers(mods ...qm.QueryMod) autoOfferQuery {
	mods = append(mods, qm.From("\"auto_offers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"auto_offers\".*"})
	}

	return autoOfferQuery{q}
}

// FindAutoOffer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAutoOffer(ctx context.Context, exec boil.ContextExecutor, offerID null.Int64, selectCols ...string) (*AutoOffer, error) {
	autoOfferObj := &AutoOffer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"auto_offers\" where \"offer_id\"=?", sel,
	)

	q := queries.Raw(query, offerID)

	err := q.Bind(ctx, exec, autoOfferObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from auto_offers")
	}

	if err = autoOfferObj.doAfterSelectHooks(ctx, exec); err != nil {
		return autoOfferObj, err
	}

	return autoOfferObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AutoOffer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no auto_offers provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(autoOfferColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	autoOfferInsertCacheMut.RLock()
	cache, cached := autoOfferInsertCache[key]
	autoOfferInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			autoOfferAllColumns,
			autoOfferColumnsWithDefault,
			autoOfferColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, autoOfferGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(autoOfferType, autoOfferMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(autoOfferType, autoOfferMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"auto_offers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"auto_offers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into auto_offers")
	}

	if !cached {
		autoOfferInsertCacheMut.Lock()
		autoOfferInsertCache[key] = cache
		autoOfferInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AutoOffer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AutoOffer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	autoOfferUpdateCacheMut.RLock()
	cache, cached := autoOfferUpdateCache[key]
	autoOfferUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			autoOfferAllColumns,
			autoOfferPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, autoOfferGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update auto_offers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"auto_offers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, autoOfferPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(autoOfferType, autoOfferMapping, append(wl, autoOfferPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update auto_offers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for auto_offers")
	}

	if !cached {
		autoOfferUpdateCacheMut.Lock()
		autoOfferUpdateCache[key] = cache
		autoOfferUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q autoOfferQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for auto_offers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for auto_offers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AutoOfferSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autoOfferPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"auto_offers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, autoOfferPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in autoOffer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all autoOffer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AutoOffer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no auto_offers provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(autoOfferColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	autoOfferUpsertCacheMut.RLock()
	cache, cached := autoOfferUpsertCache[key]
	autoOfferUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			autoOfferAllColumns,
			autoOfferColumnsWithDefault,
			autoOfferColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			autoOfferAllColumns,
			autoOfferPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert auto_offers, could not build update column list")
		}

		ret := strmangle.SetComplement(autoOfferAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(autoOfferPrimaryKeyColumns))
			copy(conflict, autoOfferPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"auto_offers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(autoOfferType, autoOfferMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(autoOfferType, autoOfferMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert auto_offers")
	}

	if !cached {
		autoOfferUpsertCacheMut.Lock()
		autoOfferUpsertCache[key] = cache
		autoOfferUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AutoOffer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AutoOffer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AutoOffer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), autoOfferPrimaryKeyMapping)
	sql := "DELETE FROM \"auto_offers\" WHERE \"offer_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from auto_offers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for auto_offers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q autoOfferQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no autoOfferQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from auto_offers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auto_offers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AutoOfferSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(autoOfferBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autoOfferPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"auto_offers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, autoOfferPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from autoOffer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auto_offers")
	}

	if len(autoOfferAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AutoOffer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAutoOffer(ctx, exec, o.OfferID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AutoOfferSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AutoOfferSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autoOfferPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"auto_offers\".* FROM \"auto_offers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, autoOfferPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AutoOfferSlice")
	}

	*o = slice

	return nil
}

// AutoOfferExists checks if the AutoOffer row exists.
func AutoOfferExists(ctx context.Context, exec boil.ContextExecutor, offerID null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"auto_offers\" where \"offer_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, offerID)
	}
	row := exec.QueryRowContext(ctx, sql, offerID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if auto_offers exists")
	}

	return exists, nil
}

// Exists checks if the AutoOffer row exists.
func (o *AutoOffer) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AutoOfferExists(ctx, exec, o.OfferID)
}
