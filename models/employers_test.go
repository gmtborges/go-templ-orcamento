// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testEmployers(t *testing.T) {
	t.Parallel()

	query := Employers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testEmployersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Employer{}
	if err = randomize.Struct(seed, o, employerDBTypes, true, employerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Employers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEmployersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Employer{}
	if err = randomize.Struct(seed, o, employerDBTypes, true, employerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Employers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Employers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEmployersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Employer{}
	if err = randomize.Struct(seed, o, employerDBTypes, true, employerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EmployerSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Employers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEmployersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Employer{}
	if err = randomize.Struct(seed, o, employerDBTypes, true, employerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := EmployerExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Employer exists: %s", err)
	}
	if !e {
		t.Errorf("Expected EmployerExists to return true, but got false.")
	}
}

func testEmployersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Employer{}
	if err = randomize.Struct(seed, o, employerDBTypes, true, employerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	employerFound, err := FindEmployer(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if employerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testEmployersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Employer{}
	if err = randomize.Struct(seed, o, employerDBTypes, true, employerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Employers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testEmployersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Employer{}
	if err = randomize.Struct(seed, o, employerDBTypes, true, employerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Employers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testEmployersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	employerOne := &Employer{}
	employerTwo := &Employer{}
	if err = randomize.Struct(seed, employerOne, employerDBTypes, false, employerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employer struct: %s", err)
	}
	if err = randomize.Struct(seed, employerTwo, employerDBTypes, false, employerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = employerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = employerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Employers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testEmployersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	employerOne := &Employer{}
	employerTwo := &Employer{}
	if err = randomize.Struct(seed, employerOne, employerDBTypes, false, employerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employer struct: %s", err)
	}
	if err = randomize.Struct(seed, employerTwo, employerDBTypes, false, employerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = employerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = employerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Employers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func employerBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Employer) error {
	*o = Employer{}
	return nil
}

func employerAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Employer) error {
	*o = Employer{}
	return nil
}

func employerAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Employer) error {
	*o = Employer{}
	return nil
}

func employerBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Employer) error {
	*o = Employer{}
	return nil
}

func employerAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Employer) error {
	*o = Employer{}
	return nil
}

func employerBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Employer) error {
	*o = Employer{}
	return nil
}

func employerAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Employer) error {
	*o = Employer{}
	return nil
}

func employerBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Employer) error {
	*o = Employer{}
	return nil
}

func employerAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Employer) error {
	*o = Employer{}
	return nil
}

func testEmployersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Employer{}
	o := &Employer{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, employerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Employer object: %s", err)
	}

	AddEmployerHook(boil.BeforeInsertHook, employerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	employerBeforeInsertHooks = []EmployerHook{}

	AddEmployerHook(boil.AfterInsertHook, employerAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	employerAfterInsertHooks = []EmployerHook{}

	AddEmployerHook(boil.AfterSelectHook, employerAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	employerAfterSelectHooks = []EmployerHook{}

	AddEmployerHook(boil.BeforeUpdateHook, employerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	employerBeforeUpdateHooks = []EmployerHook{}

	AddEmployerHook(boil.AfterUpdateHook, employerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	employerAfterUpdateHooks = []EmployerHook{}

	AddEmployerHook(boil.BeforeDeleteHook, employerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	employerBeforeDeleteHooks = []EmployerHook{}

	AddEmployerHook(boil.AfterDeleteHook, employerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	employerAfterDeleteHooks = []EmployerHook{}

	AddEmployerHook(boil.BeforeUpsertHook, employerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	employerBeforeUpsertHooks = []EmployerHook{}

	AddEmployerHook(boil.AfterUpsertHook, employerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	employerAfterUpsertHooks = []EmployerHook{}
}

func testEmployersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Employer{}
	if err = randomize.Struct(seed, o, employerDBTypes, true, employerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Employers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEmployersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Employer{}
	if err = randomize.Struct(seed, o, employerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Employer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(employerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Employers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEmployerToManyAutoStores(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Employer
	var b, c AutoStore

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, employerDBTypes, true, employerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employer struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, autoStoreDBTypes, false, autoStoreColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, autoStoreDBTypes, false, autoStoreColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.EmployerID = a.ID
	c.EmployerID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AutoStores().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.EmployerID == b.EmployerID {
			bFound = true
		}
		if v.EmployerID == c.EmployerID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := EmployerSlice{&a}
	if err = a.L.LoadAutoStores(ctx, tx, false, (*[]*Employer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AutoStores); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AutoStores = nil
	if err = a.L.LoadAutoStores(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AutoStores); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testEmployerToManyCompanies(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Employer
	var b, c Company

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, employerDBTypes, true, employerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employer struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, companyDBTypes, false, companyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, companyDBTypes, false, companyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.EmployerID = a.ID
	c.EmployerID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Companies().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.EmployerID == b.EmployerID {
			bFound = true
		}
		if v.EmployerID == c.EmployerID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := EmployerSlice{&a}
	if err = a.L.LoadCompanies(ctx, tx, false, (*[]*Employer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Companies); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Companies = nil
	if err = a.L.LoadCompanies(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Companies); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testEmployerToManyUsers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Employer
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, employerDBTypes, true, employerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employer struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.EmployerID = a.ID
	c.EmployerID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Users().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.EmployerID == b.EmployerID {
			bFound = true
		}
		if v.EmployerID == c.EmployerID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := EmployerSlice{&a}
	if err = a.L.LoadUsers(ctx, tx, false, (*[]*Employer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Users); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Users = nil
	if err = a.L.LoadUsers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Users); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testEmployerToManyAddOpAutoStores(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Employer
	var b, c, d, e AutoStore

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, employerDBTypes, false, strmangle.SetComplement(employerPrimaryKeyColumns, employerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AutoStore{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, autoStoreDBTypes, false, strmangle.SetComplement(autoStorePrimaryKeyColumns, autoStoreColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AutoStore{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAutoStores(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.EmployerID {
			t.Error("foreign key was wrong value", a.ID, first.EmployerID)
		}
		if a.ID != second.EmployerID {
			t.Error("foreign key was wrong value", a.ID, second.EmployerID)
		}

		if first.R.Employer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Employer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AutoStores[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AutoStores[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AutoStores().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testEmployerToManyAddOpCompanies(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Employer
	var b, c, d, e Company

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, employerDBTypes, false, strmangle.SetComplement(employerPrimaryKeyColumns, employerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Company{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Company{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCompanies(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.EmployerID {
			t.Error("foreign key was wrong value", a.ID, first.EmployerID)
		}
		if a.ID != second.EmployerID {
			t.Error("foreign key was wrong value", a.ID, second.EmployerID)
		}

		if first.R.Employer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Employer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Companies[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Companies[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Companies().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testEmployerToManyAddOpUsers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Employer
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, employerDBTypes, false, strmangle.SetComplement(employerPrimaryKeyColumns, employerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*User{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUsers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.EmployerID {
			t.Error("foreign key was wrong value", a.ID, first.EmployerID)
		}
		if a.ID != second.EmployerID {
			t.Error("foreign key was wrong value", a.ID, second.EmployerID)
		}

		if first.R.Employer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Employer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Users[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Users[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Users().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testEmployersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Employer{}
	if err = randomize.Struct(seed, o, employerDBTypes, true, employerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEmployersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Employer{}
	if err = randomize.Struct(seed, o, employerDBTypes, true, employerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EmployerSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEmployersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Employer{}
	if err = randomize.Struct(seed, o, employerDBTypes, true, employerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Employers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	employerDBTypes = map[string]string{`ID`: `integer`, `Type`: `character varying`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_               = bytes.MinRead
)

func testEmployersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(employerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(employerAllColumns) == len(employerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Employer{}
	if err = randomize.Struct(seed, o, employerDBTypes, true, employerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Employers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, employerDBTypes, true, employerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Employer struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testEmployersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(employerAllColumns) == len(employerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Employer{}
	if err = randomize.Struct(seed, o, employerDBTypes, true, employerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Employers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, employerDBTypes, true, employerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Employer struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(employerAllColumns, employerPrimaryKeyColumns) {
		fields = employerAllColumns
	} else {
		fields = strmangle.SetComplement(
			employerAllColumns,
			employerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := EmployerSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testEmployersUpsert(t *testing.T) {
	t.Parallel()

	if len(employerAllColumns) == len(employerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Employer{}
	if err = randomize.Struct(seed, &o, employerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Employer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Employer: %s", err)
	}

	count, err := Employers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, employerDBTypes, false, employerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Employer struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Employer: %s", err)
	}

	count, err = Employers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
