// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAutoStores(t *testing.T) {
	t.Parallel()

	query := AutoStores()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAutoStoresDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoStore{}
	if err = randomize.Struct(seed, o, autoStoreDBTypes, true, autoStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AutoStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAutoStoresQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoStore{}
	if err = randomize.Struct(seed, o, autoStoreDBTypes, true, autoStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AutoStores().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AutoStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAutoStoresSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoStore{}
	if err = randomize.Struct(seed, o, autoStoreDBTypes, true, autoStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AutoStoreSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AutoStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAutoStoresExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoStore{}
	if err = randomize.Struct(seed, o, autoStoreDBTypes, true, autoStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AutoStoreExists(ctx, tx, o.StoreID)
	if err != nil {
		t.Errorf("Unable to check if AutoStore exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AutoStoreExists to return true, but got false.")
	}
}

func testAutoStoresFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoStore{}
	if err = randomize.Struct(seed, o, autoStoreDBTypes, true, autoStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	autoStoreFound, err := FindAutoStore(ctx, tx, o.StoreID)
	if err != nil {
		t.Error(err)
	}

	if autoStoreFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAutoStoresBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoStore{}
	if err = randomize.Struct(seed, o, autoStoreDBTypes, true, autoStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AutoStores().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAutoStoresOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoStore{}
	if err = randomize.Struct(seed, o, autoStoreDBTypes, true, autoStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AutoStores().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAutoStoresAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	autoStoreOne := &AutoStore{}
	autoStoreTwo := &AutoStore{}
	if err = randomize.Struct(seed, autoStoreOne, autoStoreDBTypes, false, autoStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoStore struct: %s", err)
	}
	if err = randomize.Struct(seed, autoStoreTwo, autoStoreDBTypes, false, autoStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = autoStoreOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = autoStoreTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AutoStores().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAutoStoresCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	autoStoreOne := &AutoStore{}
	autoStoreTwo := &AutoStore{}
	if err = randomize.Struct(seed, autoStoreOne, autoStoreDBTypes, false, autoStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoStore struct: %s", err)
	}
	if err = randomize.Struct(seed, autoStoreTwo, autoStoreDBTypes, false, autoStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = autoStoreOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = autoStoreTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AutoStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func autoStoreBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AutoStore) error {
	*o = AutoStore{}
	return nil
}

func autoStoreAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AutoStore) error {
	*o = AutoStore{}
	return nil
}

func autoStoreAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AutoStore) error {
	*o = AutoStore{}
	return nil
}

func autoStoreBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AutoStore) error {
	*o = AutoStore{}
	return nil
}

func autoStoreAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AutoStore) error {
	*o = AutoStore{}
	return nil
}

func autoStoreBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AutoStore) error {
	*o = AutoStore{}
	return nil
}

func autoStoreAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AutoStore) error {
	*o = AutoStore{}
	return nil
}

func autoStoreBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AutoStore) error {
	*o = AutoStore{}
	return nil
}

func autoStoreAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AutoStore) error {
	*o = AutoStore{}
	return nil
}

func testAutoStoresHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AutoStore{}
	o := &AutoStore{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, autoStoreDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AutoStore object: %s", err)
	}

	AddAutoStoreHook(boil.BeforeInsertHook, autoStoreBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	autoStoreBeforeInsertHooks = []AutoStoreHook{}

	AddAutoStoreHook(boil.AfterInsertHook, autoStoreAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	autoStoreAfterInsertHooks = []AutoStoreHook{}

	AddAutoStoreHook(boil.AfterSelectHook, autoStoreAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	autoStoreAfterSelectHooks = []AutoStoreHook{}

	AddAutoStoreHook(boil.BeforeUpdateHook, autoStoreBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	autoStoreBeforeUpdateHooks = []AutoStoreHook{}

	AddAutoStoreHook(boil.AfterUpdateHook, autoStoreAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	autoStoreAfterUpdateHooks = []AutoStoreHook{}

	AddAutoStoreHook(boil.BeforeDeleteHook, autoStoreBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	autoStoreBeforeDeleteHooks = []AutoStoreHook{}

	AddAutoStoreHook(boil.AfterDeleteHook, autoStoreAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	autoStoreAfterDeleteHooks = []AutoStoreHook{}

	AddAutoStoreHook(boil.BeforeUpsertHook, autoStoreBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	autoStoreBeforeUpsertHooks = []AutoStoreHook{}

	AddAutoStoreHook(boil.AfterUpsertHook, autoStoreAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	autoStoreAfterUpsertHooks = []AutoStoreHook{}
}

func testAutoStoresInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoStore{}
	if err = randomize.Struct(seed, o, autoStoreDBTypes, true, autoStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AutoStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAutoStoresInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoStore{}
	if err = randomize.Struct(seed, o, autoStoreDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AutoStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(autoStoreColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AutoStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAutoStoreToManyStoreAutoOffers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutoStore
	var b, c AutoOffer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, autoStoreDBTypes, true, autoStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoStore struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, autoOfferDBTypes, false, autoOfferColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, autoOfferDBTypes, false, autoOfferColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.StoreID, a.StoreID)
	queries.Assign(&c.StoreID, a.StoreID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.StoreAutoOffers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.StoreID, b.StoreID) {
			bFound = true
		}
		if queries.Equal(v.StoreID, c.StoreID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AutoStoreSlice{&a}
	if err = a.L.LoadStoreAutoOffers(ctx, tx, false, (*[]*AutoStore)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.StoreAutoOffers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.StoreAutoOffers = nil
	if err = a.L.LoadStoreAutoOffers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.StoreAutoOffers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAutoStoreToManyAddOpStoreAutoOffers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutoStore
	var b, c, d, e AutoOffer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, autoStoreDBTypes, false, strmangle.SetComplement(autoStorePrimaryKeyColumns, autoStoreColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AutoOffer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, autoOfferDBTypes, false, strmangle.SetComplement(autoOfferPrimaryKeyColumns, autoOfferColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AutoOffer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddStoreAutoOffers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.StoreID, first.StoreID) {
			t.Error("foreign key was wrong value", a.StoreID, first.StoreID)
		}
		if !queries.Equal(a.StoreID, second.StoreID) {
			t.Error("foreign key was wrong value", a.StoreID, second.StoreID)
		}

		if first.R.Store != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Store != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.StoreAutoOffers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.StoreAutoOffers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.StoreAutoOffers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAutoStoreToOneAutoPartsCategoryUsingCategory(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AutoStore
	var foreign AutoPartsCategory

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, autoStoreDBTypes, false, autoStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoStore struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, autoPartsCategoryDBTypes, true, autoPartsCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoPartsCategory struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CategoryID, foreign.CategoryID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Category().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.CategoryID, foreign.CategoryID) {
		t.Errorf("want: %v, got %v", foreign.CategoryID, check.CategoryID)
	}

	ranAfterSelectHook := false
	AddAutoPartsCategoryHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *AutoPartsCategory) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := AutoStoreSlice{&local}
	if err = local.L.LoadCategory(ctx, tx, false, (*[]*AutoStore)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Category = nil
	if err = local.L.LoadCategory(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testAutoStoreToOneSetOpAutoPartsCategoryUsingCategory(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutoStore
	var b, c AutoPartsCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, autoStoreDBTypes, false, strmangle.SetComplement(autoStorePrimaryKeyColumns, autoStoreColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, autoPartsCategoryDBTypes, false, strmangle.SetComplement(autoPartsCategoryPrimaryKeyColumns, autoPartsCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, autoPartsCategoryDBTypes, false, strmangle.SetComplement(autoPartsCategoryPrimaryKeyColumns, autoPartsCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AutoPartsCategory{&b, &c} {
		err = a.SetCategory(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Category != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CategoryAutoStores[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CategoryID, x.CategoryID) {
			t.Error("foreign key was wrong value", a.CategoryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CategoryID))
		reflect.Indirect(reflect.ValueOf(&a.CategoryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CategoryID, x.CategoryID) {
			t.Error("foreign key was wrong value", a.CategoryID, x.CategoryID)
		}
	}
}

func testAutoStoresReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoStore{}
	if err = randomize.Struct(seed, o, autoStoreDBTypes, true, autoStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAutoStoresReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoStore{}
	if err = randomize.Struct(seed, o, autoStoreDBTypes, true, autoStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AutoStoreSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAutoStoresSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoStore{}
	if err = randomize.Struct(seed, o, autoStoreDBTypes, true, autoStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AutoStores().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	autoStoreDBTypes = map[string]string{`StoreID`: `INTEGER`, `Name`: `TEXT`, `Location`: `TEXT`, `ContactInfo`: `TEXT`, `CategoryID`: `INTEGER`, `CreatedAt`: `DATETIME`, `UpdatedAt`: `DATETIME`}
	_                = bytes.MinRead
)

func testAutoStoresUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(autoStorePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(autoStoreAllColumns) == len(autoStorePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AutoStore{}
	if err = randomize.Struct(seed, o, autoStoreDBTypes, true, autoStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AutoStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, autoStoreDBTypes, true, autoStorePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AutoStore struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAutoStoresSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(autoStoreAllColumns) == len(autoStorePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AutoStore{}
	if err = randomize.Struct(seed, o, autoStoreDBTypes, true, autoStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AutoStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, autoStoreDBTypes, true, autoStorePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AutoStore struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(autoStoreAllColumns, autoStorePrimaryKeyColumns) {
		fields = autoStoreAllColumns
	} else {
		fields = strmangle.SetComplement(
			autoStoreAllColumns,
			autoStorePrimaryKeyColumns,
		)
		fields = strmangle.SetComplement(fields, autoStoreGeneratedColumns)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AutoStoreSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAutoStoresUpsert(t *testing.T) {
	t.Parallel()
	if len(autoStoreAllColumns) == len(autoStorePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AutoStore{}
	if err = randomize.Struct(seed, &o, autoStoreDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AutoStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AutoStore: %s", err)
	}

	count, err := AutoStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, autoStoreDBTypes, false, autoStorePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AutoStore struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AutoStore: %s", err)
	}

	count, err = AutoStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
