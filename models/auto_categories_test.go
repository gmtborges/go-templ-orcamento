// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAutoCategories(t *testing.T) {
	t.Parallel()

	query := AutoCategories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAutoCategoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoCategory{}
	if err = randomize.Struct(seed, o, autoCategoryDBTypes, true, autoCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AutoCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAutoCategoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoCategory{}
	if err = randomize.Struct(seed, o, autoCategoryDBTypes, true, autoCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AutoCategories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AutoCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAutoCategoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoCategory{}
	if err = randomize.Struct(seed, o, autoCategoryDBTypes, true, autoCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AutoCategorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AutoCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAutoCategoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoCategory{}
	if err = randomize.Struct(seed, o, autoCategoryDBTypes, true, autoCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AutoCategoryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AutoCategory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AutoCategoryExists to return true, but got false.")
	}
}

func testAutoCategoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoCategory{}
	if err = randomize.Struct(seed, o, autoCategoryDBTypes, true, autoCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	autoCategoryFound, err := FindAutoCategory(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if autoCategoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAutoCategoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoCategory{}
	if err = randomize.Struct(seed, o, autoCategoryDBTypes, true, autoCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AutoCategories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAutoCategoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoCategory{}
	if err = randomize.Struct(seed, o, autoCategoryDBTypes, true, autoCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AutoCategories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAutoCategoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	autoCategoryOne := &AutoCategory{}
	autoCategoryTwo := &AutoCategory{}
	if err = randomize.Struct(seed, autoCategoryOne, autoCategoryDBTypes, false, autoCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoCategory struct: %s", err)
	}
	if err = randomize.Struct(seed, autoCategoryTwo, autoCategoryDBTypes, false, autoCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = autoCategoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = autoCategoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AutoCategories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAutoCategoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	autoCategoryOne := &AutoCategory{}
	autoCategoryTwo := &AutoCategory{}
	if err = randomize.Struct(seed, autoCategoryOne, autoCategoryDBTypes, false, autoCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoCategory struct: %s", err)
	}
	if err = randomize.Struct(seed, autoCategoryTwo, autoCategoryDBTypes, false, autoCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = autoCategoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = autoCategoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AutoCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func autoCategoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AutoCategory) error {
	*o = AutoCategory{}
	return nil
}

func autoCategoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AutoCategory) error {
	*o = AutoCategory{}
	return nil
}

func autoCategoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AutoCategory) error {
	*o = AutoCategory{}
	return nil
}

func autoCategoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AutoCategory) error {
	*o = AutoCategory{}
	return nil
}

func autoCategoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AutoCategory) error {
	*o = AutoCategory{}
	return nil
}

func autoCategoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AutoCategory) error {
	*o = AutoCategory{}
	return nil
}

func autoCategoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AutoCategory) error {
	*o = AutoCategory{}
	return nil
}

func autoCategoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AutoCategory) error {
	*o = AutoCategory{}
	return nil
}

func autoCategoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AutoCategory) error {
	*o = AutoCategory{}
	return nil
}

func testAutoCategoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AutoCategory{}
	o := &AutoCategory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, autoCategoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AutoCategory object: %s", err)
	}

	AddAutoCategoryHook(boil.BeforeInsertHook, autoCategoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	autoCategoryBeforeInsertHooks = []AutoCategoryHook{}

	AddAutoCategoryHook(boil.AfterInsertHook, autoCategoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	autoCategoryAfterInsertHooks = []AutoCategoryHook{}

	AddAutoCategoryHook(boil.AfterSelectHook, autoCategoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	autoCategoryAfterSelectHooks = []AutoCategoryHook{}

	AddAutoCategoryHook(boil.BeforeUpdateHook, autoCategoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	autoCategoryBeforeUpdateHooks = []AutoCategoryHook{}

	AddAutoCategoryHook(boil.AfterUpdateHook, autoCategoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	autoCategoryAfterUpdateHooks = []AutoCategoryHook{}

	AddAutoCategoryHook(boil.BeforeDeleteHook, autoCategoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	autoCategoryBeforeDeleteHooks = []AutoCategoryHook{}

	AddAutoCategoryHook(boil.AfterDeleteHook, autoCategoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	autoCategoryAfterDeleteHooks = []AutoCategoryHook{}

	AddAutoCategoryHook(boil.BeforeUpsertHook, autoCategoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	autoCategoryBeforeUpsertHooks = []AutoCategoryHook{}

	AddAutoCategoryHook(boil.AfterUpsertHook, autoCategoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	autoCategoryAfterUpsertHooks = []AutoCategoryHook{}
}

func testAutoCategoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoCategory{}
	if err = randomize.Struct(seed, o, autoCategoryDBTypes, true, autoCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AutoCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAutoCategoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoCategory{}
	if err = randomize.Struct(seed, o, autoCategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AutoCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(autoCategoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AutoCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAutoCategoryToManyAutoStores(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutoCategory
	var b, c AutoStore

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, autoCategoryDBTypes, true, autoCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoCategory struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, autoStoreDBTypes, false, autoStoreColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, autoStoreDBTypes, false, autoStoreColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"auto_stores_categories\" (\"auto_category_id\", \"auto_store_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"auto_stores_categories\" (\"auto_category_id\", \"auto_store_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.AutoStores().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AutoCategorySlice{&a}
	if err = a.L.LoadAutoStores(ctx, tx, false, (*[]*AutoCategory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AutoStores); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AutoStores = nil
	if err = a.L.LoadAutoStores(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AutoStores); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAutoCategoryToManyCategoryBiddings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutoCategory
	var b, c Bidding

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, autoCategoryDBTypes, true, autoCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoCategory struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, biddingDBTypes, false, biddingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, biddingDBTypes, false, biddingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CategoryID = a.ID
	c.CategoryID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CategoryBiddings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.CategoryID == b.CategoryID {
			bFound = true
		}
		if v.CategoryID == c.CategoryID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AutoCategorySlice{&a}
	if err = a.L.LoadCategoryBiddings(ctx, tx, false, (*[]*AutoCategory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CategoryBiddings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CategoryBiddings = nil
	if err = a.L.LoadCategoryBiddings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CategoryBiddings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAutoCategoryToManyAddOpAutoStores(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutoCategory
	var b, c, d, e AutoStore

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, autoCategoryDBTypes, false, strmangle.SetComplement(autoCategoryPrimaryKeyColumns, autoCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AutoStore{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, autoStoreDBTypes, false, strmangle.SetComplement(autoStorePrimaryKeyColumns, autoStoreColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AutoStore{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAutoStores(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.AutoCategories[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.AutoCategories[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.AutoStores[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AutoStores[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AutoStores().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAutoCategoryToManySetOpAutoStores(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutoCategory
	var b, c, d, e AutoStore

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, autoCategoryDBTypes, false, strmangle.SetComplement(autoCategoryPrimaryKeyColumns, autoCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AutoStore{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, autoStoreDBTypes, false, strmangle.SetComplement(autoStorePrimaryKeyColumns, autoStoreColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetAutoStores(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AutoStores().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetAutoStores(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AutoStores().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.AutoCategories) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.AutoCategories) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.AutoCategories[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.AutoCategories[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.AutoStores[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.AutoStores[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAutoCategoryToManyRemoveOpAutoStores(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutoCategory
	var b, c, d, e AutoStore

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, autoCategoryDBTypes, false, strmangle.SetComplement(autoCategoryPrimaryKeyColumns, autoCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AutoStore{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, autoStoreDBTypes, false, strmangle.SetComplement(autoStorePrimaryKeyColumns, autoStoreColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddAutoStores(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AutoStores().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveAutoStores(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AutoStores().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.AutoCategories) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.AutoCategories) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.AutoCategories[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.AutoCategories[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.AutoStores) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.AutoStores[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.AutoStores[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAutoCategoryToManyAddOpCategoryBiddings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutoCategory
	var b, c, d, e Bidding

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, autoCategoryDBTypes, false, strmangle.SetComplement(autoCategoryPrimaryKeyColumns, autoCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Bidding{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, biddingDBTypes, false, strmangle.SetComplement(biddingPrimaryKeyColumns, biddingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Bidding{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCategoryBiddings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CategoryID {
			t.Error("foreign key was wrong value", a.ID, first.CategoryID)
		}
		if a.ID != second.CategoryID {
			t.Error("foreign key was wrong value", a.ID, second.CategoryID)
		}

		if first.R.Category != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Category != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CategoryBiddings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CategoryBiddings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CategoryBiddings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAutoCategoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoCategory{}
	if err = randomize.Struct(seed, o, autoCategoryDBTypes, true, autoCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAutoCategoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoCategory{}
	if err = randomize.Struct(seed, o, autoCategoryDBTypes, true, autoCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AutoCategorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAutoCategoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoCategory{}
	if err = randomize.Struct(seed, o, autoCategoryDBTypes, true, autoCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AutoCategories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	autoCategoryDBTypes = map[string]string{`ID`: `integer`, `Name`: `character varying`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_                   = bytes.MinRead
)

func testAutoCategoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(autoCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(autoCategoryAllColumns) == len(autoCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AutoCategory{}
	if err = randomize.Struct(seed, o, autoCategoryDBTypes, true, autoCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AutoCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, autoCategoryDBTypes, true, autoCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AutoCategory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAutoCategoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(autoCategoryAllColumns) == len(autoCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AutoCategory{}
	if err = randomize.Struct(seed, o, autoCategoryDBTypes, true, autoCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AutoCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, autoCategoryDBTypes, true, autoCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AutoCategory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(autoCategoryAllColumns, autoCategoryPrimaryKeyColumns) {
		fields = autoCategoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			autoCategoryAllColumns,
			autoCategoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AutoCategorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAutoCategoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(autoCategoryAllColumns) == len(autoCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AutoCategory{}
	if err = randomize.Struct(seed, &o, autoCategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AutoCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AutoCategory: %s", err)
	}

	count, err := AutoCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, autoCategoryDBTypes, false, autoCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AutoCategory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AutoCategory: %s", err)
	}

	count, err = AutoCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
