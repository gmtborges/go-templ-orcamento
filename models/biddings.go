// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Bidding is an object representing the database table.
type Bidding struct {
	BiddingID   null.Int64  `boil:"bidding_id" json:"bidding_id,omitempty" toml:"bidding_id" yaml:"bidding_id,omitempty"`
	CompanyID   int64       `boil:"company_id" json:"company_id" toml:"company_id" yaml:"company_id"`
	Title       string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	StartDate   null.Time   `boil:"start_date" json:"start_date,omitempty" toml:"start_date" yaml:"start_date,omitempty"`
	EndDate     null.Time   `boil:"end_date" json:"end_date,omitempty" toml:"end_date" yaml:"end_date,omitempty"`
	CategoryID  int64       `boil:"category_id" json:"category_id" toml:"category_id" yaml:"category_id"`
	CreatedAt   null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt   null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *biddingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L biddingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BiddingColumns = struct {
	BiddingID   string
	CompanyID   string
	Title       string
	Description string
	StartDate   string
	EndDate     string
	CategoryID  string
	CreatedAt   string
	UpdatedAt   string
}{
	BiddingID:   "bidding_id",
	CompanyID:   "company_id",
	Title:       "title",
	Description: "description",
	StartDate:   "start_date",
	EndDate:     "end_date",
	CategoryID:  "category_id",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var BiddingTableColumns = struct {
	BiddingID   string
	CompanyID   string
	Title       string
	Description string
	StartDate   string
	EndDate     string
	CategoryID  string
	CreatedAt   string
	UpdatedAt   string
}{
	BiddingID:   "biddings.bidding_id",
	CompanyID:   "biddings.company_id",
	Title:       "biddings.title",
	Description: "biddings.description",
	StartDate:   "biddings.start_date",
	EndDate:     "biddings.end_date",
	CategoryID:  "biddings.category_id",
	CreatedAt:   "biddings.created_at",
	UpdatedAt:   "biddings.updated_at",
}

// Generated where

var BiddingWhere = struct {
	BiddingID   whereHelpernull_Int64
	CompanyID   whereHelperint64
	Title       whereHelperstring
	Description whereHelpernull_String
	StartDate   whereHelpernull_Time
	EndDate     whereHelpernull_Time
	CategoryID  whereHelperint64
	CreatedAt   whereHelpernull_Time
	UpdatedAt   whereHelpernull_Time
}{
	BiddingID:   whereHelpernull_Int64{field: "\"biddings\".\"bidding_id\""},
	CompanyID:   whereHelperint64{field: "\"biddings\".\"company_id\""},
	Title:       whereHelperstring{field: "\"biddings\".\"title\""},
	Description: whereHelpernull_String{field: "\"biddings\".\"description\""},
	StartDate:   whereHelpernull_Time{field: "\"biddings\".\"start_date\""},
	EndDate:     whereHelpernull_Time{field: "\"biddings\".\"end_date\""},
	CategoryID:  whereHelperint64{field: "\"biddings\".\"category_id\""},
	CreatedAt:   whereHelpernull_Time{field: "\"biddings\".\"created_at\""},
	UpdatedAt:   whereHelpernull_Time{field: "\"biddings\".\"updated_at\""},
}

// BiddingRels is where relationship names are stored.
var BiddingRels = struct {
	Category   string
	Company    string
	AutoOffers string
}{
	Category:   "Category",
	Company:    "Company",
	AutoOffers: "AutoOffers",
}

// biddingR is where relationships are stored.
type biddingR struct {
	Category   *AutoPartsCategory `boil:"Category" json:"Category" toml:"Category" yaml:"Category"`
	Company    *Company           `boil:"Company" json:"Company" toml:"Company" yaml:"Company"`
	AutoOffers AutoOfferSlice     `boil:"AutoOffers" json:"AutoOffers" toml:"AutoOffers" yaml:"AutoOffers"`
}

// NewStruct creates a new relationship struct
func (*biddingR) NewStruct() *biddingR {
	return &biddingR{}
}

func (r *biddingR) GetCategory() *AutoPartsCategory {
	if r == nil {
		return nil
	}
	return r.Category
}

func (r *biddingR) GetCompany() *Company {
	if r == nil {
		return nil
	}
	return r.Company
}

func (r *biddingR) GetAutoOffers() AutoOfferSlice {
	if r == nil {
		return nil
	}
	return r.AutoOffers
}

// biddingL is where Load methods for each relationship are stored.
type biddingL struct{}

var (
	biddingAllColumns            = []string{"bidding_id", "company_id", "title", "description", "start_date", "end_date", "category_id", "created_at", "updated_at"}
	biddingColumnsWithoutDefault = []string{"company_id", "title", "category_id"}
	biddingColumnsWithDefault    = []string{"bidding_id", "description", "start_date", "end_date", "created_at", "updated_at"}
	biddingPrimaryKeyColumns     = []string{"bidding_id"}
	biddingGeneratedColumns      = []string{"bidding_id"}
)

type (
	// BiddingSlice is an alias for a slice of pointers to Bidding.
	// This should almost always be used instead of []Bidding.
	BiddingSlice []*Bidding
	// BiddingHook is the signature for custom Bidding hook methods
	BiddingHook func(context.Context, boil.ContextExecutor, *Bidding) error

	biddingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	biddingType                 = reflect.TypeOf(&Bidding{})
	biddingMapping              = queries.MakeStructMapping(biddingType)
	biddingPrimaryKeyMapping, _ = queries.BindMapping(biddingType, biddingMapping, biddingPrimaryKeyColumns)
	biddingInsertCacheMut       sync.RWMutex
	biddingInsertCache          = make(map[string]insertCache)
	biddingUpdateCacheMut       sync.RWMutex
	biddingUpdateCache          = make(map[string]updateCache)
	biddingUpsertCacheMut       sync.RWMutex
	biddingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var biddingAfterSelectMu sync.Mutex
var biddingAfterSelectHooks []BiddingHook

var biddingBeforeInsertMu sync.Mutex
var biddingBeforeInsertHooks []BiddingHook
var biddingAfterInsertMu sync.Mutex
var biddingAfterInsertHooks []BiddingHook

var biddingBeforeUpdateMu sync.Mutex
var biddingBeforeUpdateHooks []BiddingHook
var biddingAfterUpdateMu sync.Mutex
var biddingAfterUpdateHooks []BiddingHook

var biddingBeforeDeleteMu sync.Mutex
var biddingBeforeDeleteHooks []BiddingHook
var biddingAfterDeleteMu sync.Mutex
var biddingAfterDeleteHooks []BiddingHook

var biddingBeforeUpsertMu sync.Mutex
var biddingBeforeUpsertHooks []BiddingHook
var biddingAfterUpsertMu sync.Mutex
var biddingAfterUpsertHooks []BiddingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Bidding) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biddingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Bidding) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biddingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Bidding) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biddingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Bidding) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biddingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Bidding) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biddingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Bidding) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biddingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Bidding) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biddingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Bidding) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biddingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Bidding) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biddingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBiddingHook registers your hook function for all future operations.
func AddBiddingHook(hookPoint boil.HookPoint, biddingHook BiddingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		biddingAfterSelectMu.Lock()
		biddingAfterSelectHooks = append(biddingAfterSelectHooks, biddingHook)
		biddingAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		biddingBeforeInsertMu.Lock()
		biddingBeforeInsertHooks = append(biddingBeforeInsertHooks, biddingHook)
		biddingBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		biddingAfterInsertMu.Lock()
		biddingAfterInsertHooks = append(biddingAfterInsertHooks, biddingHook)
		biddingAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		biddingBeforeUpdateMu.Lock()
		biddingBeforeUpdateHooks = append(biddingBeforeUpdateHooks, biddingHook)
		biddingBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		biddingAfterUpdateMu.Lock()
		biddingAfterUpdateHooks = append(biddingAfterUpdateHooks, biddingHook)
		biddingAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		biddingBeforeDeleteMu.Lock()
		biddingBeforeDeleteHooks = append(biddingBeforeDeleteHooks, biddingHook)
		biddingBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		biddingAfterDeleteMu.Lock()
		biddingAfterDeleteHooks = append(biddingAfterDeleteHooks, biddingHook)
		biddingAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		biddingBeforeUpsertMu.Lock()
		biddingBeforeUpsertHooks = append(biddingBeforeUpsertHooks, biddingHook)
		biddingBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		biddingAfterUpsertMu.Lock()
		biddingAfterUpsertHooks = append(biddingAfterUpsertHooks, biddingHook)
		biddingAfterUpsertMu.Unlock()
	}
}

// One returns a single bidding record from the query.
func (q biddingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Bidding, error) {
	o := &Bidding{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for biddings")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Bidding records from the query.
func (q biddingQuery) All(ctx context.Context, exec boil.ContextExecutor) (BiddingSlice, error) {
	var o []*Bidding

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Bidding slice")
	}

	if len(biddingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Bidding records in the query.
func (q biddingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count biddings rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q biddingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if biddings exists")
	}

	return count > 0, nil
}

// Category pointed to by the foreign key.
func (o *Bidding) Category(mods ...qm.QueryMod) autoPartsCategoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"category_id\" = ?", o.CategoryID),
	}

	queryMods = append(queryMods, mods...)

	return AutoPartsCategories(queryMods...)
}

// Company pointed to by the foreign key.
func (o *Bidding) Company(mods ...qm.QueryMod) companyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"company_id\" = ?", o.CompanyID),
	}

	queryMods = append(queryMods, mods...)

	return Companies(queryMods...)
}

// AutoOffers retrieves all the auto_offer's AutoOffers with an executor.
func (o *Bidding) AutoOffers(mods ...qm.QueryMod) autoOfferQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"auto_offers\".\"bidding_id\"=?", o.BiddingID),
	)

	return AutoOffers(queryMods...)
}

// LoadCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (biddingL) LoadCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBidding interface{}, mods queries.Applicator) error {
	var slice []*Bidding
	var object *Bidding

	if singular {
		var ok bool
		object, ok = maybeBidding.(*Bidding)
		if !ok {
			object = new(Bidding)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBidding)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBidding))
			}
		}
	} else {
		s, ok := maybeBidding.(*[]*Bidding)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBidding)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBidding))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &biddingR{}
		}
		if !queries.IsNil(object.CategoryID) {
			args[object.CategoryID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &biddingR{}
			}

			if !queries.IsNil(obj.CategoryID) {
				args[obj.CategoryID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`auto_parts_categories`),
		qm.WhereIn(`auto_parts_categories.category_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AutoPartsCategory")
	}

	var resultSlice []*AutoPartsCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AutoPartsCategory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for auto_parts_categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auto_parts_categories")
	}

	if len(autoPartsCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Category = foreign
		if foreign.R == nil {
			foreign.R = &autoPartsCategoryR{}
		}
		foreign.R.CategoryBiddings = append(foreign.R.CategoryBiddings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CategoryID, foreign.CategoryID) {
				local.R.Category = foreign
				if foreign.R == nil {
					foreign.R = &autoPartsCategoryR{}
				}
				foreign.R.CategoryBiddings = append(foreign.R.CategoryBiddings, local)
				break
			}
		}
	}

	return nil
}

// LoadCompany allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (biddingL) LoadCompany(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBidding interface{}, mods queries.Applicator) error {
	var slice []*Bidding
	var object *Bidding

	if singular {
		var ok bool
		object, ok = maybeBidding.(*Bidding)
		if !ok {
			object = new(Bidding)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBidding)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBidding))
			}
		}
	} else {
		s, ok := maybeBidding.(*[]*Bidding)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBidding)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBidding))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &biddingR{}
		}
		if !queries.IsNil(object.CompanyID) {
			args[object.CompanyID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &biddingR{}
			}

			if !queries.IsNil(obj.CompanyID) {
				args[obj.CompanyID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`companies`),
		qm.WhereIn(`companies.company_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Company")
	}

	var resultSlice []*Company
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Company")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for companies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for companies")
	}

	if len(companyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Company = foreign
		if foreign.R == nil {
			foreign.R = &companyR{}
		}
		foreign.R.Biddings = append(foreign.R.Biddings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CompanyID, foreign.CompanyID) {
				local.R.Company = foreign
				if foreign.R == nil {
					foreign.R = &companyR{}
				}
				foreign.R.Biddings = append(foreign.R.Biddings, local)
				break
			}
		}
	}

	return nil
}

// LoadAutoOffers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (biddingL) LoadAutoOffers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBidding interface{}, mods queries.Applicator) error {
	var slice []*Bidding
	var object *Bidding

	if singular {
		var ok bool
		object, ok = maybeBidding.(*Bidding)
		if !ok {
			object = new(Bidding)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBidding)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBidding))
			}
		}
	} else {
		s, ok := maybeBidding.(*[]*Bidding)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBidding)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBidding))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &biddingR{}
		}
		args[object.BiddingID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &biddingR{}
			}
			args[obj.BiddingID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`auto_offers`),
		qm.WhereIn(`auto_offers.bidding_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load auto_offers")
	}

	var resultSlice []*AutoOffer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice auto_offers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on auto_offers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auto_offers")
	}

	if len(autoOfferAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AutoOffers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &autoOfferR{}
			}
			foreign.R.Bidding = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BiddingID, foreign.BiddingID) {
				local.R.AutoOffers = append(local.R.AutoOffers, foreign)
				if foreign.R == nil {
					foreign.R = &autoOfferR{}
				}
				foreign.R.Bidding = local
				break
			}
		}
	}

	return nil
}

// SetCategory of the bidding to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.CategoryBiddings.
func (o *Bidding) SetCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AutoPartsCategory) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"biddings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"category_id"}),
		strmangle.WhereClause("\"", "\"", 0, biddingPrimaryKeyColumns),
	)
	values := []interface{}{related.CategoryID, o.BiddingID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CategoryID, related.CategoryID)
	if o.R == nil {
		o.R = &biddingR{
			Category: related,
		}
	} else {
		o.R.Category = related
	}

	if related.R == nil {
		related.R = &autoPartsCategoryR{
			CategoryBiddings: BiddingSlice{o},
		}
	} else {
		related.R.CategoryBiddings = append(related.R.CategoryBiddings, o)
	}

	return nil
}

// SetCompany of the bidding to the related item.
// Sets o.R.Company to related.
// Adds o to related.R.Biddings.
func (o *Bidding) SetCompany(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Company) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"biddings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"company_id"}),
		strmangle.WhereClause("\"", "\"", 0, biddingPrimaryKeyColumns),
	)
	values := []interface{}{related.CompanyID, o.BiddingID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CompanyID, related.CompanyID)
	if o.R == nil {
		o.R = &biddingR{
			Company: related,
		}
	} else {
		o.R.Company = related
	}

	if related.R == nil {
		related.R = &companyR{
			Biddings: BiddingSlice{o},
		}
	} else {
		related.R.Biddings = append(related.R.Biddings, o)
	}

	return nil
}

// AddAutoOffers adds the given related objects to the existing relationships
// of the bidding, optionally inserting them as new records.
// Appends related to o.R.AutoOffers.
// Sets related.R.Bidding appropriately.
func (o *Bidding) AddAutoOffers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AutoOffer) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BiddingID, o.BiddingID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"auto_offers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"bidding_id"}),
				strmangle.WhereClause("\"", "\"", 0, autoOfferPrimaryKeyColumns),
			)
			values := []interface{}{o.BiddingID, rel.OfferID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BiddingID, o.BiddingID)
		}
	}

	if o.R == nil {
		o.R = &biddingR{
			AutoOffers: related,
		}
	} else {
		o.R.AutoOffers = append(o.R.AutoOffers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &autoOfferR{
				Bidding: o,
			}
		} else {
			rel.R.Bidding = o
		}
	}
	return nil
}

// Biddings retrieves all the records using an executor.
func Biddings(mods ...qm.QueryMod) biddingQuery {
	mods = append(mods, qm.From("\"biddings\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"biddings\".*"})
	}

	return biddingQuery{q}
}

// FindBidding retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBidding(ctx context.Context, exec boil.ContextExecutor, biddingID null.Int64, selectCols ...string) (*Bidding, error) {
	biddingObj := &Bidding{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"biddings\" where \"bidding_id\"=?", sel,
	)

	q := queries.Raw(query, biddingID)

	err := q.Bind(ctx, exec, biddingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from biddings")
	}

	if err = biddingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return biddingObj, err
	}

	return biddingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Bidding) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no biddings provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(biddingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	biddingInsertCacheMut.RLock()
	cache, cached := biddingInsertCache[key]
	biddingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			biddingAllColumns,
			biddingColumnsWithDefault,
			biddingColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, biddingGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(biddingType, biddingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(biddingType, biddingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"biddings\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"biddings\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into biddings")
	}

	if !cached {
		biddingInsertCacheMut.Lock()
		biddingInsertCache[key] = cache
		biddingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Bidding.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Bidding) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	biddingUpdateCacheMut.RLock()
	cache, cached := biddingUpdateCache[key]
	biddingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			biddingAllColumns,
			biddingPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, biddingGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update biddings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"biddings\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, biddingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(biddingType, biddingMapping, append(wl, biddingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update biddings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for biddings")
	}

	if !cached {
		biddingUpdateCacheMut.Lock()
		biddingUpdateCache[key] = cache
		biddingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q biddingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for biddings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for biddings")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BiddingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), biddingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"biddings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, biddingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in bidding slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all bidding")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Bidding) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no biddings provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(biddingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	biddingUpsertCacheMut.RLock()
	cache, cached := biddingUpsertCache[key]
	biddingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			biddingAllColumns,
			biddingColumnsWithDefault,
			biddingColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			biddingAllColumns,
			biddingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert biddings, could not build update column list")
		}

		ret := strmangle.SetComplement(biddingAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(biddingPrimaryKeyColumns))
			copy(conflict, biddingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"biddings\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(biddingType, biddingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(biddingType, biddingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert biddings")
	}

	if !cached {
		biddingUpsertCacheMut.Lock()
		biddingUpsertCache[key] = cache
		biddingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Bidding record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Bidding) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Bidding provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), biddingPrimaryKeyMapping)
	sql := "DELETE FROM \"biddings\" WHERE \"bidding_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from biddings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for biddings")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q biddingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no biddingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from biddings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for biddings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BiddingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(biddingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), biddingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"biddings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, biddingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bidding slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for biddings")
	}

	if len(biddingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Bidding) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBidding(ctx, exec, o.BiddingID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BiddingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BiddingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), biddingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"biddings\".* FROM \"biddings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, biddingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BiddingSlice")
	}

	*o = slice

	return nil
}

// BiddingExists checks if the Bidding row exists.
func BiddingExists(ctx context.Context, exec boil.ContextExecutor, biddingID null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"biddings\" where \"bidding_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, biddingID)
	}
	row := exec.QueryRowContext(ctx, sql, biddingID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if biddings exists")
	}

	return exists, nil
}

// Exists checks if the Bidding row exists.
func (o *Bidding) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BiddingExists(ctx, exec, o.BiddingID)
}
