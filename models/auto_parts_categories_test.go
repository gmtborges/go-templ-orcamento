// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAutoPartsCategories(t *testing.T) {
	t.Parallel()

	query := AutoPartsCategories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAutoPartsCategoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoPartsCategory{}
	if err = randomize.Struct(seed, o, autoPartsCategoryDBTypes, true, autoPartsCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoPartsCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AutoPartsCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAutoPartsCategoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoPartsCategory{}
	if err = randomize.Struct(seed, o, autoPartsCategoryDBTypes, true, autoPartsCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoPartsCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AutoPartsCategories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AutoPartsCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAutoPartsCategoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoPartsCategory{}
	if err = randomize.Struct(seed, o, autoPartsCategoryDBTypes, true, autoPartsCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoPartsCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AutoPartsCategorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AutoPartsCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAutoPartsCategoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoPartsCategory{}
	if err = randomize.Struct(seed, o, autoPartsCategoryDBTypes, true, autoPartsCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoPartsCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AutoPartsCategoryExists(ctx, tx, o.CategoryID)
	if err != nil {
		t.Errorf("Unable to check if AutoPartsCategory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AutoPartsCategoryExists to return true, but got false.")
	}
}

func testAutoPartsCategoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoPartsCategory{}
	if err = randomize.Struct(seed, o, autoPartsCategoryDBTypes, true, autoPartsCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoPartsCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	autoPartsCategoryFound, err := FindAutoPartsCategory(ctx, tx, o.CategoryID)
	if err != nil {
		t.Error(err)
	}

	if autoPartsCategoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAutoPartsCategoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoPartsCategory{}
	if err = randomize.Struct(seed, o, autoPartsCategoryDBTypes, true, autoPartsCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoPartsCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AutoPartsCategories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAutoPartsCategoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoPartsCategory{}
	if err = randomize.Struct(seed, o, autoPartsCategoryDBTypes, true, autoPartsCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoPartsCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AutoPartsCategories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAutoPartsCategoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	autoPartsCategoryOne := &AutoPartsCategory{}
	autoPartsCategoryTwo := &AutoPartsCategory{}
	if err = randomize.Struct(seed, autoPartsCategoryOne, autoPartsCategoryDBTypes, false, autoPartsCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoPartsCategory struct: %s", err)
	}
	if err = randomize.Struct(seed, autoPartsCategoryTwo, autoPartsCategoryDBTypes, false, autoPartsCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoPartsCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = autoPartsCategoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = autoPartsCategoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AutoPartsCategories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAutoPartsCategoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	autoPartsCategoryOne := &AutoPartsCategory{}
	autoPartsCategoryTwo := &AutoPartsCategory{}
	if err = randomize.Struct(seed, autoPartsCategoryOne, autoPartsCategoryDBTypes, false, autoPartsCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoPartsCategory struct: %s", err)
	}
	if err = randomize.Struct(seed, autoPartsCategoryTwo, autoPartsCategoryDBTypes, false, autoPartsCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoPartsCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = autoPartsCategoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = autoPartsCategoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AutoPartsCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func autoPartsCategoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AutoPartsCategory) error {
	*o = AutoPartsCategory{}
	return nil
}

func autoPartsCategoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AutoPartsCategory) error {
	*o = AutoPartsCategory{}
	return nil
}

func autoPartsCategoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AutoPartsCategory) error {
	*o = AutoPartsCategory{}
	return nil
}

func autoPartsCategoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AutoPartsCategory) error {
	*o = AutoPartsCategory{}
	return nil
}

func autoPartsCategoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AutoPartsCategory) error {
	*o = AutoPartsCategory{}
	return nil
}

func autoPartsCategoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AutoPartsCategory) error {
	*o = AutoPartsCategory{}
	return nil
}

func autoPartsCategoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AutoPartsCategory) error {
	*o = AutoPartsCategory{}
	return nil
}

func autoPartsCategoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AutoPartsCategory) error {
	*o = AutoPartsCategory{}
	return nil
}

func autoPartsCategoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AutoPartsCategory) error {
	*o = AutoPartsCategory{}
	return nil
}

func testAutoPartsCategoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AutoPartsCategory{}
	o := &AutoPartsCategory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, autoPartsCategoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AutoPartsCategory object: %s", err)
	}

	AddAutoPartsCategoryHook(boil.BeforeInsertHook, autoPartsCategoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	autoPartsCategoryBeforeInsertHooks = []AutoPartsCategoryHook{}

	AddAutoPartsCategoryHook(boil.AfterInsertHook, autoPartsCategoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	autoPartsCategoryAfterInsertHooks = []AutoPartsCategoryHook{}

	AddAutoPartsCategoryHook(boil.AfterSelectHook, autoPartsCategoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	autoPartsCategoryAfterSelectHooks = []AutoPartsCategoryHook{}

	AddAutoPartsCategoryHook(boil.BeforeUpdateHook, autoPartsCategoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	autoPartsCategoryBeforeUpdateHooks = []AutoPartsCategoryHook{}

	AddAutoPartsCategoryHook(boil.AfterUpdateHook, autoPartsCategoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	autoPartsCategoryAfterUpdateHooks = []AutoPartsCategoryHook{}

	AddAutoPartsCategoryHook(boil.BeforeDeleteHook, autoPartsCategoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	autoPartsCategoryBeforeDeleteHooks = []AutoPartsCategoryHook{}

	AddAutoPartsCategoryHook(boil.AfterDeleteHook, autoPartsCategoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	autoPartsCategoryAfterDeleteHooks = []AutoPartsCategoryHook{}

	AddAutoPartsCategoryHook(boil.BeforeUpsertHook, autoPartsCategoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	autoPartsCategoryBeforeUpsertHooks = []AutoPartsCategoryHook{}

	AddAutoPartsCategoryHook(boil.AfterUpsertHook, autoPartsCategoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	autoPartsCategoryAfterUpsertHooks = []AutoPartsCategoryHook{}
}

func testAutoPartsCategoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoPartsCategory{}
	if err = randomize.Struct(seed, o, autoPartsCategoryDBTypes, true, autoPartsCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoPartsCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AutoPartsCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAutoPartsCategoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoPartsCategory{}
	if err = randomize.Struct(seed, o, autoPartsCategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AutoPartsCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(autoPartsCategoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AutoPartsCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAutoPartsCategoryToManyCategoryAutoStores(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutoPartsCategory
	var b, c AutoStore

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, autoPartsCategoryDBTypes, true, autoPartsCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoPartsCategory struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, autoStoreDBTypes, false, autoStoreColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, autoStoreDBTypes, false, autoStoreColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CategoryID, a.CategoryID)
	queries.Assign(&c.CategoryID, a.CategoryID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CategoryAutoStores().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CategoryID, b.CategoryID) {
			bFound = true
		}
		if queries.Equal(v.CategoryID, c.CategoryID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AutoPartsCategorySlice{&a}
	if err = a.L.LoadCategoryAutoStores(ctx, tx, false, (*[]*AutoPartsCategory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CategoryAutoStores); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CategoryAutoStores = nil
	if err = a.L.LoadCategoryAutoStores(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CategoryAutoStores); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAutoPartsCategoryToManyCategoryBiddings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutoPartsCategory
	var b, c Bidding

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, autoPartsCategoryDBTypes, true, autoPartsCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoPartsCategory struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, biddingDBTypes, false, biddingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, biddingDBTypes, false, biddingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CategoryID, a.CategoryID)
	queries.Assign(&c.CategoryID, a.CategoryID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CategoryBiddings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CategoryID, b.CategoryID) {
			bFound = true
		}
		if queries.Equal(v.CategoryID, c.CategoryID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AutoPartsCategorySlice{&a}
	if err = a.L.LoadCategoryBiddings(ctx, tx, false, (*[]*AutoPartsCategory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CategoryBiddings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CategoryBiddings = nil
	if err = a.L.LoadCategoryBiddings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CategoryBiddings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAutoPartsCategoryToManyAddOpCategoryAutoStores(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutoPartsCategory
	var b, c, d, e AutoStore

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, autoPartsCategoryDBTypes, false, strmangle.SetComplement(autoPartsCategoryPrimaryKeyColumns, autoPartsCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AutoStore{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, autoStoreDBTypes, false, strmangle.SetComplement(autoStorePrimaryKeyColumns, autoStoreColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AutoStore{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCategoryAutoStores(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.CategoryID, first.CategoryID) {
			t.Error("foreign key was wrong value", a.CategoryID, first.CategoryID)
		}
		if !queries.Equal(a.CategoryID, second.CategoryID) {
			t.Error("foreign key was wrong value", a.CategoryID, second.CategoryID)
		}

		if first.R.Category != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Category != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CategoryAutoStores[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CategoryAutoStores[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CategoryAutoStores().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAutoPartsCategoryToManyAddOpCategoryBiddings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutoPartsCategory
	var b, c, d, e Bidding

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, autoPartsCategoryDBTypes, false, strmangle.SetComplement(autoPartsCategoryPrimaryKeyColumns, autoPartsCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Bidding{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, biddingDBTypes, false, strmangle.SetComplement(biddingPrimaryKeyColumns, biddingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Bidding{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCategoryBiddings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.CategoryID, first.CategoryID) {
			t.Error("foreign key was wrong value", a.CategoryID, first.CategoryID)
		}
		if !queries.Equal(a.CategoryID, second.CategoryID) {
			t.Error("foreign key was wrong value", a.CategoryID, second.CategoryID)
		}

		if first.R.Category != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Category != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CategoryBiddings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CategoryBiddings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CategoryBiddings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAutoPartsCategoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoPartsCategory{}
	if err = randomize.Struct(seed, o, autoPartsCategoryDBTypes, true, autoPartsCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoPartsCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAutoPartsCategoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoPartsCategory{}
	if err = randomize.Struct(seed, o, autoPartsCategoryDBTypes, true, autoPartsCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoPartsCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AutoPartsCategorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAutoPartsCategoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoPartsCategory{}
	if err = randomize.Struct(seed, o, autoPartsCategoryDBTypes, true, autoPartsCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoPartsCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AutoPartsCategories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	autoPartsCategoryDBTypes = map[string]string{`CategoryID`: `INTEGER`, `CategoryName`: `TEXT`, `CreatedAt`: `DATETIME`, `UpdatedAt`: `DATETIME`}
	_                        = bytes.MinRead
)

func testAutoPartsCategoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(autoPartsCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(autoPartsCategoryAllColumns) == len(autoPartsCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AutoPartsCategory{}
	if err = randomize.Struct(seed, o, autoPartsCategoryDBTypes, true, autoPartsCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoPartsCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AutoPartsCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, autoPartsCategoryDBTypes, true, autoPartsCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AutoPartsCategory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAutoPartsCategoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(autoPartsCategoryAllColumns) == len(autoPartsCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AutoPartsCategory{}
	if err = randomize.Struct(seed, o, autoPartsCategoryDBTypes, true, autoPartsCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoPartsCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AutoPartsCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, autoPartsCategoryDBTypes, true, autoPartsCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AutoPartsCategory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(autoPartsCategoryAllColumns, autoPartsCategoryPrimaryKeyColumns) {
		fields = autoPartsCategoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			autoPartsCategoryAllColumns,
			autoPartsCategoryPrimaryKeyColumns,
		)
		fields = strmangle.SetComplement(fields, autoPartsCategoryGeneratedColumns)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AutoPartsCategorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAutoPartsCategoriesUpsert(t *testing.T) {
	t.Parallel()
	if len(autoPartsCategoryAllColumns) == len(autoPartsCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AutoPartsCategory{}
	if err = randomize.Struct(seed, &o, autoPartsCategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AutoPartsCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AutoPartsCategory: %s", err)
	}

	count, err := AutoPartsCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, autoPartsCategoryDBTypes, false, autoPartsCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AutoPartsCategory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AutoPartsCategory: %s", err)
	}

	count, err = AutoPartsCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
