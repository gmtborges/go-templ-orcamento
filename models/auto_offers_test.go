// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAutoOffers(t *testing.T) {
	t.Parallel()

	query := AutoOffers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAutoOffersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoOffer{}
	if err = randomize.Struct(seed, o, autoOfferDBTypes, true, autoOfferColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoOffer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AutoOffers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAutoOffersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoOffer{}
	if err = randomize.Struct(seed, o, autoOfferDBTypes, true, autoOfferColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoOffer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AutoOffers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AutoOffers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAutoOffersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoOffer{}
	if err = randomize.Struct(seed, o, autoOfferDBTypes, true, autoOfferColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoOffer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AutoOfferSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AutoOffers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAutoOffersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoOffer{}
	if err = randomize.Struct(seed, o, autoOfferDBTypes, true, autoOfferColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoOffer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AutoOfferExists(ctx, tx, o.OfferID)
	if err != nil {
		t.Errorf("Unable to check if AutoOffer exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AutoOfferExists to return true, but got false.")
	}
}

func testAutoOffersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoOffer{}
	if err = randomize.Struct(seed, o, autoOfferDBTypes, true, autoOfferColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoOffer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	autoOfferFound, err := FindAutoOffer(ctx, tx, o.OfferID)
	if err != nil {
		t.Error(err)
	}

	if autoOfferFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAutoOffersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoOffer{}
	if err = randomize.Struct(seed, o, autoOfferDBTypes, true, autoOfferColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoOffer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AutoOffers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAutoOffersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoOffer{}
	if err = randomize.Struct(seed, o, autoOfferDBTypes, true, autoOfferColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoOffer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AutoOffers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAutoOffersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	autoOfferOne := &AutoOffer{}
	autoOfferTwo := &AutoOffer{}
	if err = randomize.Struct(seed, autoOfferOne, autoOfferDBTypes, false, autoOfferColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoOffer struct: %s", err)
	}
	if err = randomize.Struct(seed, autoOfferTwo, autoOfferDBTypes, false, autoOfferColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoOffer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = autoOfferOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = autoOfferTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AutoOffers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAutoOffersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	autoOfferOne := &AutoOffer{}
	autoOfferTwo := &AutoOffer{}
	if err = randomize.Struct(seed, autoOfferOne, autoOfferDBTypes, false, autoOfferColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoOffer struct: %s", err)
	}
	if err = randomize.Struct(seed, autoOfferTwo, autoOfferDBTypes, false, autoOfferColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoOffer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = autoOfferOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = autoOfferTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AutoOffers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func autoOfferBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AutoOffer) error {
	*o = AutoOffer{}
	return nil
}

func autoOfferAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AutoOffer) error {
	*o = AutoOffer{}
	return nil
}

func autoOfferAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AutoOffer) error {
	*o = AutoOffer{}
	return nil
}

func autoOfferBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AutoOffer) error {
	*o = AutoOffer{}
	return nil
}

func autoOfferAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AutoOffer) error {
	*o = AutoOffer{}
	return nil
}

func autoOfferBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AutoOffer) error {
	*o = AutoOffer{}
	return nil
}

func autoOfferAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AutoOffer) error {
	*o = AutoOffer{}
	return nil
}

func autoOfferBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AutoOffer) error {
	*o = AutoOffer{}
	return nil
}

func autoOfferAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AutoOffer) error {
	*o = AutoOffer{}
	return nil
}

func testAutoOffersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AutoOffer{}
	o := &AutoOffer{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, autoOfferDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AutoOffer object: %s", err)
	}

	AddAutoOfferHook(boil.BeforeInsertHook, autoOfferBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	autoOfferBeforeInsertHooks = []AutoOfferHook{}

	AddAutoOfferHook(boil.AfterInsertHook, autoOfferAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	autoOfferAfterInsertHooks = []AutoOfferHook{}

	AddAutoOfferHook(boil.AfterSelectHook, autoOfferAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	autoOfferAfterSelectHooks = []AutoOfferHook{}

	AddAutoOfferHook(boil.BeforeUpdateHook, autoOfferBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	autoOfferBeforeUpdateHooks = []AutoOfferHook{}

	AddAutoOfferHook(boil.AfterUpdateHook, autoOfferAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	autoOfferAfterUpdateHooks = []AutoOfferHook{}

	AddAutoOfferHook(boil.BeforeDeleteHook, autoOfferBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	autoOfferBeforeDeleteHooks = []AutoOfferHook{}

	AddAutoOfferHook(boil.AfterDeleteHook, autoOfferAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	autoOfferAfterDeleteHooks = []AutoOfferHook{}

	AddAutoOfferHook(boil.BeforeUpsertHook, autoOfferBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	autoOfferBeforeUpsertHooks = []AutoOfferHook{}

	AddAutoOfferHook(boil.AfterUpsertHook, autoOfferAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	autoOfferAfterUpsertHooks = []AutoOfferHook{}
}

func testAutoOffersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoOffer{}
	if err = randomize.Struct(seed, o, autoOfferDBTypes, true, autoOfferColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoOffer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AutoOffers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAutoOffersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoOffer{}
	if err = randomize.Struct(seed, o, autoOfferDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AutoOffer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(autoOfferColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AutoOffers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAutoOfferToOneAutoStoreUsingStore(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AutoOffer
	var foreign AutoStore

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, autoOfferDBTypes, false, autoOfferColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoOffer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, autoStoreDBTypes, true, autoStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoStore struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.StoreID, foreign.StoreID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Store().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.StoreID, foreign.StoreID) {
		t.Errorf("want: %v, got %v", foreign.StoreID, check.StoreID)
	}

	ranAfterSelectHook := false
	AddAutoStoreHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *AutoStore) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := AutoOfferSlice{&local}
	if err = local.L.LoadStore(ctx, tx, false, (*[]*AutoOffer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Store == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Store = nil
	if err = local.L.LoadStore(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Store == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testAutoOfferToOneBiddingUsingBidding(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AutoOffer
	var foreign Bidding

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, autoOfferDBTypes, false, autoOfferColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoOffer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, biddingDBTypes, true, biddingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bidding struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.BiddingID, foreign.BiddingID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Bidding().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.BiddingID, foreign.BiddingID) {
		t.Errorf("want: %v, got %v", foreign.BiddingID, check.BiddingID)
	}

	ranAfterSelectHook := false
	AddBiddingHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Bidding) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := AutoOfferSlice{&local}
	if err = local.L.LoadBidding(ctx, tx, false, (*[]*AutoOffer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Bidding == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Bidding = nil
	if err = local.L.LoadBidding(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Bidding == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testAutoOfferToOneSetOpAutoStoreUsingStore(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutoOffer
	var b, c AutoStore

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, autoOfferDBTypes, false, strmangle.SetComplement(autoOfferPrimaryKeyColumns, autoOfferColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, autoStoreDBTypes, false, strmangle.SetComplement(autoStorePrimaryKeyColumns, autoStoreColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, autoStoreDBTypes, false, strmangle.SetComplement(autoStorePrimaryKeyColumns, autoStoreColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AutoStore{&b, &c} {
		err = a.SetStore(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Store != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.StoreAutoOffers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.StoreID, x.StoreID) {
			t.Error("foreign key was wrong value", a.StoreID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.StoreID))
		reflect.Indirect(reflect.ValueOf(&a.StoreID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.StoreID, x.StoreID) {
			t.Error("foreign key was wrong value", a.StoreID, x.StoreID)
		}
	}
}
func testAutoOfferToOneSetOpBiddingUsingBidding(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AutoOffer
	var b, c Bidding

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, autoOfferDBTypes, false, strmangle.SetComplement(autoOfferPrimaryKeyColumns, autoOfferColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, biddingDBTypes, false, strmangle.SetComplement(biddingPrimaryKeyColumns, biddingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, biddingDBTypes, false, strmangle.SetComplement(biddingPrimaryKeyColumns, biddingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Bidding{&b, &c} {
		err = a.SetBidding(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Bidding != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AutoOffers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.BiddingID, x.BiddingID) {
			t.Error("foreign key was wrong value", a.BiddingID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BiddingID))
		reflect.Indirect(reflect.ValueOf(&a.BiddingID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.BiddingID, x.BiddingID) {
			t.Error("foreign key was wrong value", a.BiddingID, x.BiddingID)
		}
	}
}

func testAutoOffersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoOffer{}
	if err = randomize.Struct(seed, o, autoOfferDBTypes, true, autoOfferColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoOffer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAutoOffersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoOffer{}
	if err = randomize.Struct(seed, o, autoOfferDBTypes, true, autoOfferColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoOffer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AutoOfferSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAutoOffersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AutoOffer{}
	if err = randomize.Struct(seed, o, autoOfferDBTypes, true, autoOfferColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoOffer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AutoOffers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	autoOfferDBTypes = map[string]string{`OfferID`: `INTEGER`, `BiddingID`: `INTEGER`, `StoreID`: `INTEGER`, `OfferDetails`: `TEXT`, `OfferDate`: `DATE`, `CreatedAt`: `DATETIME`, `UpdatedAt`: `DATETIME`}
	_                = bytes.MinRead
)

func testAutoOffersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(autoOfferPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(autoOfferAllColumns) == len(autoOfferPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AutoOffer{}
	if err = randomize.Struct(seed, o, autoOfferDBTypes, true, autoOfferColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoOffer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AutoOffers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, autoOfferDBTypes, true, autoOfferPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AutoOffer struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAutoOffersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(autoOfferAllColumns) == len(autoOfferPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AutoOffer{}
	if err = randomize.Struct(seed, o, autoOfferDBTypes, true, autoOfferColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AutoOffer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AutoOffers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, autoOfferDBTypes, true, autoOfferPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AutoOffer struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(autoOfferAllColumns, autoOfferPrimaryKeyColumns) {
		fields = autoOfferAllColumns
	} else {
		fields = strmangle.SetComplement(
			autoOfferAllColumns,
			autoOfferPrimaryKeyColumns,
		)
		fields = strmangle.SetComplement(fields, autoOfferGeneratedColumns)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AutoOfferSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAutoOffersUpsert(t *testing.T) {
	t.Parallel()
	if len(autoOfferAllColumns) == len(autoOfferPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AutoOffer{}
	if err = randomize.Struct(seed, &o, autoOfferDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AutoOffer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AutoOffer: %s", err)
	}

	count, err := AutoOffers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, autoOfferDBTypes, false, autoOfferPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AutoOffer struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AutoOffer: %s", err)
	}

	count, err = AutoOffers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
